{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is Fred? Fred is a visual drag-and-drop fr ont-end ed itor for MODX CMS . It empowers ordinary people to create exceptional content without knowing how to code or learning complex interfaces. You can create content with Fred by merely dragging Elements from a sidebar and dropping them where you wish for them to appear. Select the copy you wish to change or click an image you want to update, edit directly in your browser, and click a green checkmark to save the changes. What does Fred do for developers and site builders? Fred helps theme builders break into the MODX ecosystem. It is easy to port existing themes to Fred and export them ready for the MODX Extras . Fred offers existing MODX developers an option to create more flexible and intuitive experiences for their site owners. Fred can power designs that would otherwise require dozens of TVs, a complex Manager UI, or tricky Manager customization. Fred brings content creators familiar visual controls like sliders, toggles and color pickers. Further, these controls can pass parameters to MODX Snippets and its API for a bulletproof and powerful content creation solution. In short, Fred makes constructing complex pages simple for even the most non-technical users. How is Fred different from other visual content builders? Fred adheres to MODX\u2019s core tenet of Creative Freedom. It doesn\u2019t force you into someone else\u2019s preferred front-end framework or way of building things. If you can imagine or prototype it, Fred can power it\u2014without compromise. Developers and designers can realize pixel-perfect websites and confidently turn over content creation duties without fear of things breaking. So whether a site is made by customizing a free starter theme, or handcrafted 100% from scratch, Fred can help everyone build websites faster, more consistently and with better results. What Else Can Fred Do? The following is a sample of Fred\u2019s capabilities that make it a compelling visual content building platform: Transform static Design Libraries into a live content creating tool that strictly adheres to brand standards, and that is easily understood and used by non-technical team members across your entire organization Use optional conditional/looping Twig template logic to create robust Elements limited only by your imagination Create and organize collections of Elements as building blocks for pages Blueprints provide \u201creplace the placeholders\u201d full- or partial-page templates Multiple dropzones for complete control of every page layout Configure content using a variety of controls including toggles, text inputs, date pickers, select inputs, sliders, Resource pickers, and color pickers Supports MODX code Snippets with live Ajax rendering of changes Visual Font Awesome 5 icon picker\u2014developers can create other icon pickers, too Simple content formatting with a curated default TinyMCE rich text editor Rearrange and re-order page content via drag-and-drop Quickly duplicate existing Elements to build up galleries and sliders Fred content renders down to cachable output for blazing-fast page speed Complete set of production-ready Bootstrap 4 Elements to slash the time needed for theme builders to get started","title":"What is Fred?"},{"location":"#what-is-fred","text":"Fred is a visual drag-and-drop fr ont-end ed itor for MODX CMS . It empowers ordinary people to create exceptional content without knowing how to code or learning complex interfaces. You can create content with Fred by merely dragging Elements from a sidebar and dropping them where you wish for them to appear. Select the copy you wish to change or click an image you want to update, edit directly in your browser, and click a green checkmark to save the changes.","title":"What is Fred?"},{"location":"#what-does-fred-do-for-developers-and-site-builders","text":"Fred helps theme builders break into the MODX ecosystem. It is easy to port existing themes to Fred and export them ready for the MODX Extras . Fred offers existing MODX developers an option to create more flexible and intuitive experiences for their site owners. Fred can power designs that would otherwise require dozens of TVs, a complex Manager UI, or tricky Manager customization. Fred brings content creators familiar visual controls like sliders, toggles and color pickers. Further, these controls can pass parameters to MODX Snippets and its API for a bulletproof and powerful content creation solution. In short, Fred makes constructing complex pages simple for even the most non-technical users.","title":"What does Fred do for developers and site builders?"},{"location":"#how-is-fred-different-from-other-visual-content-builders","text":"Fred adheres to MODX\u2019s core tenet of Creative Freedom. It doesn\u2019t force you into someone else\u2019s preferred front-end framework or way of building things. If you can imagine or prototype it, Fred can power it\u2014without compromise. Developers and designers can realize pixel-perfect websites and confidently turn over content creation duties without fear of things breaking. So whether a site is made by customizing a free starter theme, or handcrafted 100% from scratch, Fred can help everyone build websites faster, more consistently and with better results.","title":"How is Fred different from other visual content builders?"},{"location":"#what-else-can-fred-do","text":"The following is a sample of Fred\u2019s capabilities that make it a compelling visual content building platform: Transform static Design Libraries into a live content creating tool that strictly adheres to brand standards, and that is easily understood and used by non-technical team members across your entire organization Use optional conditional/looping Twig template logic to create robust Elements limited only by your imagination Create and organize collections of Elements as building blocks for pages Blueprints provide \u201creplace the placeholders\u201d full- or partial-page templates Multiple dropzones for complete control of every page layout Configure content using a variety of controls including toggles, text inputs, date pickers, select inputs, sliders, Resource pickers, and color pickers Supports MODX code Snippets with live Ajax rendering of changes Visual Font Awesome 5 icon picker\u2014developers can create other icon pickers, too Simple content formatting with a curated default TinyMCE rich text editor Rearrange and re-order page content via drag-and-drop Quickly duplicate existing Elements to build up galleries and sliders Fred content renders down to cachable output for blazing-fast page speed Complete set of production-ready Bootstrap 4 Elements to slash the time needed for theme builders to get started","title":"What Else Can Fred Do?"},{"location":"blueprints/","text":"Blueprints Blueprints are pre-designed content sections or even full pages of content. These can be used as starting points for structured content like landing pages, product pages, etc. Blueprints function as a \u201creplace the placeholders\u201d way to create content. They are a collection of one or more Elements with sample content and images in place. You can also use Blueprints as demo pages which theme users can use to start a site with complete layouts made up of any combination of content and Elements. Blueprints are organized into user-determined categories such as Headers, Landing Pages, Galleries, etc. Using Blueprints Like Elements, find a Blueprint you wish to use and drag-and-drop it into a Dropzone on a Fred-enabled page. Creating Blueprints Users with permissions to do so can save Blueprints and share them with others or keep them private so only their users can see them. Use cases for private Blueprints include testing by theme creators (since they won\u2019t be included in exported Themes), saving specific combinations and settings for Elements that only you will use, and end users currating frequently used Blueprints acros categories into a single location. A more advanced use case is overriding default settings of commonly used Elements to match frequently changed settings like changing margins, padding or text-alignment. Blueprint Screenshots When creating a Blueprint, it will generate a screenshot image for you. However, you may wish to manually create your own screenshot as the libary used to build screen captures does not understand all CSS properties. Full-page Blueprints Complete Blueprints are a copy of an entire page of content. You create these from the front-end when Fred is enabled. To create a complete Blueprint, click the Blueprints icon in the Fred sidebar, then choose an existing category from the top or create a new category for your Blueprints. Give your Blueprint a name and save Partial Blueprints Partial Blueprints are made from the overlapping, rounded-corner squares icon that appears when hovering/focusing an Element in the front-end. Click this Blueprint icon, choose a category, give it a name, and save.","title":"Blueprints"},{"location":"blueprints/#blueprints","text":"Blueprints are pre-designed content sections or even full pages of content. These can be used as starting points for structured content like landing pages, product pages, etc. Blueprints function as a \u201creplace the placeholders\u201d way to create content. They are a collection of one or more Elements with sample content and images in place. You can also use Blueprints as demo pages which theme users can use to start a site with complete layouts made up of any combination of content and Elements. Blueprints are organized into user-determined categories such as Headers, Landing Pages, Galleries, etc.","title":"Blueprints"},{"location":"blueprints/#using-blueprints","text":"Like Elements, find a Blueprint you wish to use and drag-and-drop it into a Dropzone on a Fred-enabled page.","title":"Using Blueprints"},{"location":"blueprints/#creating-blueprints","text":"Users with permissions to do so can save Blueprints and share them with others or keep them private so only their users can see them. Use cases for private Blueprints include testing by theme creators (since they won\u2019t be included in exported Themes), saving specific combinations and settings for Elements that only you will use, and end users currating frequently used Blueprints acros categories into a single location. A more advanced use case is overriding default settings of commonly used Elements to match frequently changed settings like changing margins, padding or text-alignment.","title":"Creating Blueprints"},{"location":"blueprints/#blueprint-screenshots","text":"When creating a Blueprint, it will generate a screenshot image for you. However, you may wish to manually create your own screenshot as the libary used to build screen captures does not understand all CSS properties.","title":"Blueprint Screenshots"},{"location":"blueprints/#full-page-blueprints","text":"Complete Blueprints are a copy of an entire page of content. You create these from the front-end when Fred is enabled. To create a complete Blueprint, click the Blueprints icon in the Fred sidebar, then choose an existing category from the top or create a new category for your Blueprints. Give your Blueprint a name and save","title":"Full-page Blueprints"},{"location":"blueprints/#partial-blueprints","text":"Partial Blueprints are made from the overlapping, rounded-corner squares icon that appears when hovering/focusing an Element in the front-end. Click this Blueprint icon, choose a category, give it a name, and save.","title":"Partial Blueprints"},{"location":"credits/","text":"Credits Fred uses Open Source components. You can find the source code, along with license information, in the links below. We acknowledge and are grateful to these developers for their contributions to open source. UI Related Choices.js Homepage: https://joshuajohnson.co.uk/Choices/ Copyright (c) 2016 Josh Johnson http://joshuajohnson.co.uk/ License (MIT): https://github.com/jshjohnson/Choices/blob/master/LICENSE Usage: vanilla JS select box/text input inspired by Select2 and Selectize Dragula Homepage: https://bevacqua.github.io/dragula/ Copyright (c) 2015-2016 Nicolas Bevacqua https://ponyfoo.com/ License (MIT): https://github.com/bevacqua/dragula/blob/master/license Usage: drag and drop flatpickr Homepage: https://flatpickr.js.org Copyright (c) 2017 Gregory Petrosyan https://github.com/chmln License (MIT): https://github.com/flatpickr/flatpickr/blob/master/LICENSE.md Usage: datetime picker hoverintent Homepage: https://www.npmjs.com/package/hoverintent Copyright (c) 2007-2017 Brian Cherne https://github.com/briancherne Copyright (c) Tristen Brown https://www.npmjs.com/~tristen License (MIT): https://github.com/tristen/hoverintent/blob/gh-pages/LICENCE Usage: vanilla JS version of Brian Cherne's mouse-tracking tool html2canvas Homepage: https://html2canvas.hertzen.com/ Copyright (c) 2012 Niklas von Hertzen https://hertzen.com/ License (MIT): https://github.com/flatpickr/flatpickr/blob/master/LICENSE.md Usage: screenshots with JavaScript Mousetrap Homepage: https://craig.is/killing/mice Copyright 2012-2017 Craig Campbell https://craig.is/ License (Apache License 2.0): https://github.com/ccampbell/mousetrap/blob/master/LICENSE Usage: keyboard shortcuts noUiSlider Homepage: https://github.com/leongersen/noUiSlider Copyright (c) 2018 L\u00e9on Gersen https://refreshless.com/blog/ License (MIT): https://github.com/leongersen/noUiSlider/blob/master/LICENSE.md Usage: vanilla JS range slider control Twig Homepage: https://twig.symfony.com/ Copyright (c) 2009-2019 by the Twig Team http://fabien.potencier.org/ License (new BSD License): https://twig.symfony.com/license Usage: a JavaScript and PHP template engine Code Logic isomorphic-fetch Homepage: https://github.com/matthew-andrews/isomorphic-fetch Copyright (c) 2015 Matt Andrews https://mattandre.ws/ License (MIT): https://github.com/matthew-andrews/isomorphic-fetch/blob/master/LICENSE Usage: Fetch for node and Browserify. Built on top of GitHub's WHATWG Fetch polyfill. jsSHA Homepage: https://caligatio.github.io/jsSHA/ Copyright (c) 1998-2009 Paul Johnston Contributors Copyright (c) 2008-2018 Brian Turek https://github.com/Caligatio License (MIT): https://github.com/rico345100/promise-cancel#license Usage: a JavaScript implementation of the entire family of SHA hashes Lodash Homepage: https://lodash.com/ Usage: taking the hassle out of working with arrays, numbers, objects, strings, etc. Copyright JS Foundation and other contributors https://js.foundation/ License (MIT): https://raw.githubusercontent.com/lodash/lodash/4.17.11-npm/LICENSE promise-cancel Homepage: https://github.com/rico345100/promise-cancel#readme Copyright (c) .modernator http://modernator.me/ License (MIT): https://github.com/rico345100/promise-cancel#license Usage: cancel/timeout Promises","title":"Credits"},{"location":"credits/#credits","text":"Fred uses Open Source components. You can find the source code, along with license information, in the links below. We acknowledge and are grateful to these developers for their contributions to open source.","title":"Credits"},{"location":"credits/#ui-related","text":"","title":"UI &amp; Related"},{"location":"credits/#choicesjs","text":"Homepage: https://joshuajohnson.co.uk/Choices/ Copyright (c) 2016 Josh Johnson http://joshuajohnson.co.uk/ License (MIT): https://github.com/jshjohnson/Choices/blob/master/LICENSE Usage: vanilla JS select box/text input inspired by Select2 and Selectize","title":"Choices.js"},{"location":"credits/#dragula","text":"Homepage: https://bevacqua.github.io/dragula/ Copyright (c) 2015-2016 Nicolas Bevacqua https://ponyfoo.com/ License (MIT): https://github.com/bevacqua/dragula/blob/master/license Usage: drag and drop","title":"Dragula"},{"location":"credits/#flatpickr","text":"Homepage: https://flatpickr.js.org Copyright (c) 2017 Gregory Petrosyan https://github.com/chmln License (MIT): https://github.com/flatpickr/flatpickr/blob/master/LICENSE.md Usage: datetime picker","title":"flatpickr"},{"location":"credits/#hoverintent","text":"Homepage: https://www.npmjs.com/package/hoverintent Copyright (c) 2007-2017 Brian Cherne https://github.com/briancherne Copyright (c) Tristen Brown https://www.npmjs.com/~tristen License (MIT): https://github.com/tristen/hoverintent/blob/gh-pages/LICENCE Usage: vanilla JS version of Brian Cherne's mouse-tracking tool","title":"hoverintent"},{"location":"credits/#html2canvas","text":"Homepage: https://html2canvas.hertzen.com/ Copyright (c) 2012 Niklas von Hertzen https://hertzen.com/ License (MIT): https://github.com/flatpickr/flatpickr/blob/master/LICENSE.md Usage: screenshots with JavaScript","title":"html2canvas"},{"location":"credits/#mousetrap","text":"Homepage: https://craig.is/killing/mice Copyright 2012-2017 Craig Campbell https://craig.is/ License (Apache License 2.0): https://github.com/ccampbell/mousetrap/blob/master/LICENSE Usage: keyboard shortcuts","title":"Mousetrap"},{"location":"credits/#nouislider","text":"Homepage: https://github.com/leongersen/noUiSlider Copyright (c) 2018 L\u00e9on Gersen https://refreshless.com/blog/ License (MIT): https://github.com/leongersen/noUiSlider/blob/master/LICENSE.md Usage: vanilla JS range slider control","title":"noUiSlider"},{"location":"credits/#twig","text":"Homepage: https://twig.symfony.com/ Copyright (c) 2009-2019 by the Twig Team http://fabien.potencier.org/ License (new BSD License): https://twig.symfony.com/license Usage: a JavaScript and PHP template engine","title":"Twig"},{"location":"credits/#code-logic","text":"","title":"Code &amp; Logic"},{"location":"credits/#isomorphic-fetch","text":"Homepage: https://github.com/matthew-andrews/isomorphic-fetch Copyright (c) 2015 Matt Andrews https://mattandre.ws/ License (MIT): https://github.com/matthew-andrews/isomorphic-fetch/blob/master/LICENSE Usage: Fetch for node and Browserify. Built on top of GitHub's WHATWG Fetch polyfill.","title":"isomorphic-fetch"},{"location":"credits/#jssha","text":"Homepage: https://caligatio.github.io/jsSHA/ Copyright (c) 1998-2009 Paul Johnston Contributors Copyright (c) 2008-2018 Brian Turek https://github.com/Caligatio License (MIT): https://github.com/rico345100/promise-cancel#license Usage: a JavaScript implementation of the entire family of SHA hashes","title":"jsSHA"},{"location":"credits/#lodash","text":"Homepage: https://lodash.com/ Usage: taking the hassle out of working with arrays, numbers, objects, strings, etc. Copyright JS Foundation and other contributors https://js.foundation/ License (MIT): https://raw.githubusercontent.com/lodash/lodash/4.17.11-npm/LICENSE","title":"Lodash"},{"location":"credits/#promise-cancel","text":"Homepage: https://github.com/rico345100/promise-cancel#readme Copyright (c) .modernator http://modernator.me/ License (MIT): https://github.com/rico345100/promise-cancel#license Usage: cancel/timeout Promises","title":"promise-cancel"},{"location":"elements/","text":"Elements Fred Elements are the basic building blocks used by end-users to create content. They can be as simple as a single headline or paragraph, or more complex like a hero intro with configurable background images, text padding, opacity settings and more. Organized by Categories Elements can be organized to aid content creators in finding different types of content. For example, a Theme might contain the following Element Categories: Text Intros Quotes Code Blocks Galleries Creating Fred Elements To learn more about creating Template for Fred, see the themers documentation .","title":"Elements"},{"location":"elements/#elements","text":"Fred Elements are the basic building blocks used by end-users to create content. They can be as simple as a single headline or paragraph, or more complex like a hero intro with configurable background images, text padding, opacity settings and more.","title":"Elements"},{"location":"elements/#organized-by-categories","text":"Elements can be organized to aid content creators in finding different types of content. For example, a Theme might contain the following Element Categories: Text Intros Quotes Code Blocks Galleries","title":"Organized by Categories"},{"location":"elements/#creating-fred-elements","text":"To learn more about creating Template for Fred, see the themers documentation .","title":"Creating Fred Elements"},{"location":"getting_started/","text":"Getting Started The easiest way to start with Fred is installing a Theme created for Fred. Pick and install a Theme from the MODX Extras repository into your MODX website. Add a new page to your site. Choose one of the Templates from the Theme and save the Page. Click the Preview button to visit this page from the front-end to start building with Fred. If you\u2019re interested in creating Themes from scratch, please see the Theme Creation Tutorial .","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"The easiest way to start with Fred is installing a Theme created for Fred. Pick and install a Theme from the MODX Extras repository into your MODX website. Add a new page to your site. Choose one of the Templates from the Theme and save the Page. Click the Preview button to visit this page from the front-end to start building with Fred. If you\u2019re interested in creating Themes from scratch, please see the Theme Creation Tutorial .","title":"Getting Started"},{"location":"templates/","text":"MODX Templates Fred Fred only loads on Pages which use MODX Templates that are assigned to a Fred Theme. These are identified in the Manager by visiting the Extras menu Fred Themes top tab Themed Templates sidebar. Any pages that use a Template listed in this table will block access to the content area in the Manager and will load Fred on the front-end when logged in for editing. Dropzones Most templates will have a content Dropzone. Fred also supports multiple Dropzones for things like sidebars, headers, footers, or any other purpose you may need. Dropzones are where you drag-and-drop Elements and Blueprints from the Fred sidebar. Creating Fred Templates To learn more about creating Template for Fred, see the themers documentation .","title":"MODX Templates & Fred"},{"location":"templates/#modx-templates-fred","text":"Fred only loads on Pages which use MODX Templates that are assigned to a Fred Theme. These are identified in the Manager by visiting the Extras menu Fred Themes top tab Themed Templates sidebar. Any pages that use a Template listed in this table will block access to the content area in the Manager and will load Fred on the front-end when logged in for editing.","title":"MODX Templates &amp; Fred"},{"location":"templates/#dropzones","text":"Most templates will have a content Dropzone. Fred also supports multiple Dropzones for things like sidebars, headers, footers, or any other purpose you may need. Dropzones are where you drag-and-drop Elements and Blueprints from the Fred sidebar.","title":"Dropzones"},{"location":"templates/#creating-fred-templates","text":"To learn more about creating Template for Fred, see the themers documentation .","title":"Creating Fred Templates"},{"location":"collab/","text":"Collaborating on Themes Collaborating on Themes can be a great way to build a robust solution you can share in the MODX Extras. The reasons to collaborate with a team include: Front-end developers only worry about the markup Customer service or projects managers can focus on creating logical and simple Option Sets Product owners can work on Screenshots, Default configurations, README and CHANGELOG files Developers can implement custom code for specific functionality The Simple Way The easiest way to collaborate on a Theme is to simply invite a group of people to a site and to have them work away. Export your Theme when your happy with the results, and you\u2019re done! The \u201cRight\u201d Way If you are working with a team of people to create a Theme, storing the components in a Git repository can be a great way to collaborate. The advantage of this is that the work is versioned, making overwriting someone\u2019s work no big deal. The rest of this section is dedicated to explaining how to do this using Gitify.","title":"Intro to Collaborating"},{"location":"collab/#collaborating-on-themes","text":"Collaborating on Themes can be a great way to build a robust solution you can share in the MODX Extras. The reasons to collaborate with a team include: Front-end developers only worry about the markup Customer service or projects managers can focus on creating logical and simple Option Sets Product owners can work on Screenshots, Default configurations, README and CHANGELOG files Developers can implement custom code for specific functionality","title":"Collaborating on Themes"},{"location":"collab/#the-simple-way","text":"The easiest way to collaborate on a Theme is to simply invite a group of people to a site and to have them work away. Export your Theme when your happy with the results, and you\u2019re done!","title":"The Simple Way"},{"location":"collab/#the-right-way","text":"If you are working with a team of people to create a Theme, storing the components in a Git repository can be a great way to collaborate. The advantage of this is that the work is versioned, making overwriting someone\u2019s work no big deal. The rest of this section is dedicated to explaining how to do this using Gitify.","title":"The \u201cRight\u201d Way"},{"location":"collab/gitify/","text":"Setting up Gitify Gitify brings two-way sync of data typically stored in the MODX database, making it versionable with git. It acts as a CLI tool, like Composer, for working with MODX. While this document may seem intimdating at first, it really is a simple copy/paste command line exercise. Things you\u2019ll need to access or be familiar with: A Github Account Basic command line SSH skills (optional, but easier to follow this) A MODX Cloud account, or a host that supports git Getting Started For the purpose of this tutorial, we\u2019re assuming you will use MODX Cloud. Start by creating a blank MODX instance using the latest version. You\u2019ll also need to ssh into your site to set up Gitify. Step 1: Install Composer and Gitify Once the instance is created, ssh into it and execute the following commands starting in the home directory. This will install Composer and copy Gitify to your site. cd www; curl http://modx.co/scripts/install.sh | sh mkdir ../gitify; cd ../gitify git clone https://github.com/modmore/Gitify.git ./ Now exit the SSH session, and log back in so you can use Composer. Alternately, you can use a command like source /paas/cXXXX/.profile , replacing the cXXXX with your actual Cloud directory. Step 2: Set up Gitify From an SSH connection in the Cloud home directory: cd ~/gitify composer install chmod +x Gitify; cd ~/.bin; ln -s ../gitify/Gitify gitify After the composer install command you can confirm things worked if you see a green line of text that says \u201cGenerating autoload files\u201d. Again, log out of the SSH session so you use Gitify, or use the source\u2026 command above. Step 3: Get the Clone URL For the purposes of this tutorial, we\u2019ll use a hypothetical (but non-existant) Example Theme. To get the URL to clone, on github.com find the repository you wish to work on, and click the down-arrow on the green Clone or download button and choose the SSH URL, like git@github.com:modxcms/example.git To start a new Theme project, see the Setting up a Theme to work with Gitify guide. Step 4: Clone the Shared Theme to your MODX Instance Because you cannot git clone into a directory with anything in it, we\u2019ll use a temporary location and move the files to the web root. To get the URL to clone, click the down-arrow on the green Clone or download button on a Theme Github project and copy the SSH URL which looks like git@github.com:modxcms/fred-theme-starter.git cd ~/www git clone git@github.com:modxcms/fred-theme-starter.git tmp This will download the theme repository into a ~/www/tmp/ directory in the Cloud. Next, move the contents of tmp/ to the correct location under www/ : rsync -av ./tmp ./ Make sure the .git/ directory and files are move under www/ . Once you confirm things are in the right place, go ahead and remove tmp/ : rm -rf ./tmp Step 5: Load the Theme using Gitify Now it\u2019s time to load the Theme into your MODX instance. This will most likely include several Extras and take a a minute or longer depending on the speed of your connection. You\u2019ll see messages about downloading and installing Extras during this process: cd ~/www gitify package:install --all gitify build You should see a green one-word message Done! if the install is successful, and the same but with memory and timing stats if the build is successful. Step 6: Login to the Manager to view your Theme When done you can log in to your Manager and see the Extras, including Fred, which were installed, and review the Elements, Bluprints and Options contained in the Theme. Next steps Once you have cloned your theme to your MODX instance, you can work with a remote repository in git to collaborate .","title":"Setting up Gitify"},{"location":"collab/gitify/#setting-up-gitify","text":"Gitify brings two-way sync of data typically stored in the MODX database, making it versionable with git. It acts as a CLI tool, like Composer, for working with MODX. While this document may seem intimdating at first, it really is a simple copy/paste command line exercise. Things you\u2019ll need to access or be familiar with: A Github Account Basic command line SSH skills (optional, but easier to follow this) A MODX Cloud account, or a host that supports git","title":"Setting up Gitify"},{"location":"collab/gitify/#getting-started","text":"For the purpose of this tutorial, we\u2019re assuming you will use MODX Cloud. Start by creating a blank MODX instance using the latest version. You\u2019ll also need to ssh into your site to set up Gitify.","title":"Getting Started"},{"location":"collab/gitify/#step-1-install-composer-and-gitify","text":"Once the instance is created, ssh into it and execute the following commands starting in the home directory. This will install Composer and copy Gitify to your site. cd www; curl http://modx.co/scripts/install.sh | sh mkdir ../gitify; cd ../gitify git clone https://github.com/modmore/Gitify.git ./ Now exit the SSH session, and log back in so you can use Composer. Alternately, you can use a command like source /paas/cXXXX/.profile , replacing the cXXXX with your actual Cloud directory.","title":"Step 1: Install Composer and Gitify"},{"location":"collab/gitify/#step-2-set-up-gitify","text":"From an SSH connection in the Cloud home directory: cd ~/gitify composer install chmod +x Gitify; cd ~/.bin; ln -s ../gitify/Gitify gitify After the composer install command you can confirm things worked if you see a green line of text that says \u201cGenerating autoload files\u201d. Again, log out of the SSH session so you use Gitify, or use the source\u2026 command above.","title":"Step 2: Set up Gitify"},{"location":"collab/gitify/#step-3-get-the-clone-url","text":"For the purposes of this tutorial, we\u2019ll use a hypothetical (but non-existant) Example Theme. To get the URL to clone, on github.com find the repository you wish to work on, and click the down-arrow on the green Clone or download button and choose the SSH URL, like git@github.com:modxcms/example.git To start a new Theme project, see the Setting up a Theme to work with Gitify guide.","title":"Step 3: Get the Clone URL"},{"location":"collab/gitify/#step-4-clone-the-shared-theme-to-your-modx-instance","text":"Because you cannot git clone into a directory with anything in it, we\u2019ll use a temporary location and move the files to the web root. To get the URL to clone, click the down-arrow on the green Clone or download button on a Theme Github project and copy the SSH URL which looks like git@github.com:modxcms/fred-theme-starter.git cd ~/www git clone git@github.com:modxcms/fred-theme-starter.git tmp This will download the theme repository into a ~/www/tmp/ directory in the Cloud. Next, move the contents of tmp/ to the correct location under www/ : rsync -av ./tmp ./ Make sure the .git/ directory and files are move under www/ . Once you confirm things are in the right place, go ahead and remove tmp/ : rm -rf ./tmp","title":"Step 4: Clone the Shared Theme to your MODX Instance"},{"location":"collab/gitify/#step-5-load-the-theme-using-gitify","text":"Now it\u2019s time to load the Theme into your MODX instance. This will most likely include several Extras and take a a minute or longer depending on the speed of your connection. You\u2019ll see messages about downloading and installing Extras during this process: cd ~/www gitify package:install --all gitify build You should see a green one-word message Done! if the install is successful, and the same but with memory and timing stats if the build is successful.","title":"Step 5: Load the Theme using Gitify"},{"location":"collab/gitify/#step-6-login-to-the-manager-to-view-your-theme","text":"When done you can log in to your Manager and see the Extras, including Fred, which were installed, and review the Elements, Bluprints and Options contained in the Theme.","title":"Step 6: Login to the Manager to view your Theme"},{"location":"collab/gitify/#next-steps","text":"Once you have cloned your theme to your MODX instance, you can work with a remote repository in git to collaborate .","title":"Next steps"},{"location":"collab/gitify_in_action/","text":"Using Gitify to Collaborate on Themes You must have Gitify set up with your theme in order to follow these instructions. Working with Gitify and Git A common purpose of collaborating on a Theme will be to build a series of Elements, Bluepints, Options, and RTE Configs. For the purpose of this tutorial, we\u2019ll assume all users can commit directly to the master repository. If you need to set up a respository for collaboration, see Setting up a Theme to work with Gitify . 1. Push your Changes or Pull the Lastest It\u2019s critical to make sure that you don\u2019t lose work when collaborating with a team. To prevent accidental overwrites, always perform the following before pulling from or pushing to the orign repository. cd ~/www gitify extract git status The gitify extract command will sycn your current Fred Theme to the filesystem. The git status command will tell you if you have changes that need to be committed. 2. Commit changes to your local repo This step and step 4 below can be skipped if ther are no changes to commit. If you do have changes, first commit them to your local repository before continuing: git add --all # or git add on files you want to commit git commit -m Your commit message here # please write your own message 3. Pull the latest contributions from your collaborators Now it is time to sync all the latest updates from the upstream origin repository. From webroot, enter the following command: git pull origin master This may result in conflicts that will be noted. If there are conflicts, they must be resolved before you can continue. A conflict happens when two people change the same line of code. For information on resolving conflicts, please see Github\u2019s guide to resolving conflicts . Once you resolve conflicts, or after you have pulled from the origin, build the changes and make sure everything is functioning as expected in MODX: gitify package:install --all gitify build 4. Push your changes to the origin repository to share with collaborators If you are only pulling remote changes, skip this step as in step 2 above. Now you can safely push your changes. You\u2019ll see messages about Extracting various Fred-related things. If you delay pushing your changes, you may see an error message about (new) conflicts due to other collaborators pushing changes before you: git push origin master You have now successfully worked with a team to build a theme. If you need to collaborate using PRs, like for the Fred Starter Theme available as a demo from MODX, please see the Pull Request Git Workflow guide.","title":"Basic Gitify Usage"},{"location":"collab/gitify_in_action/#using-gitify-to-collaborate-on-themes","text":"You must have Gitify set up with your theme in order to follow these instructions.","title":"Using Gitify to Collaborate on Themes"},{"location":"collab/gitify_in_action/#working-with-gitify-and-git","text":"A common purpose of collaborating on a Theme will be to build a series of Elements, Bluepints, Options, and RTE Configs. For the purpose of this tutorial, we\u2019ll assume all users can commit directly to the master repository. If you need to set up a respository for collaboration, see Setting up a Theme to work with Gitify .","title":"Working with Gitify and Git"},{"location":"collab/gitify_in_action/#1-push-your-changes-or-pull-the-lastest","text":"It\u2019s critical to make sure that you don\u2019t lose work when collaborating with a team. To prevent accidental overwrites, always perform the following before pulling from or pushing to the orign repository. cd ~/www gitify extract git status The gitify extract command will sycn your current Fred Theme to the filesystem. The git status command will tell you if you have changes that need to be committed.","title":"1. Push your Changes or Pull the Lastest"},{"location":"collab/gitify_in_action/#2-commit-changes-to-your-local-repo","text":"This step and step 4 below can be skipped if ther are no changes to commit. If you do have changes, first commit them to your local repository before continuing: git add --all # or git add on files you want to commit git commit -m Your commit message here # please write your own message","title":"2. Commit changes to your local repo"},{"location":"collab/gitify_in_action/#3-pull-the-latest-contributions-from-your-collaborators","text":"Now it is time to sync all the latest updates from the upstream origin repository. From webroot, enter the following command: git pull origin master This may result in conflicts that will be noted. If there are conflicts, they must be resolved before you can continue. A conflict happens when two people change the same line of code. For information on resolving conflicts, please see Github\u2019s guide to resolving conflicts . Once you resolve conflicts, or after you have pulled from the origin, build the changes and make sure everything is functioning as expected in MODX: gitify package:install --all gitify build","title":"3. Pull the latest contributions from your collaborators"},{"location":"collab/gitify_in_action/#4-push-your-changes-to-the-origin-repository-to-share-with-collaborators","text":"If you are only pulling remote changes, skip this step as in step 2 above. Now you can safely push your changes. You\u2019ll see messages about Extracting various Fred-related things. If you delay pushing your changes, you may see an error message about (new) conflicts due to other collaborators pushing changes before you: git push origin master You have now successfully worked with a team to build a theme. If you need to collaborate using PRs, like for the Fred Starter Theme available as a demo from MODX, please see the Pull Request Git Workflow guide.","title":"4. Push your changes to the origin repository to share with collaborators"},{"location":"collab/initial_extract/","text":"Setting up a Theme to work with Gitify Start by clicking the green New button when signed into Github. Give your new repository a name and description. This will be the source \u201corigin\u201d for collaborators. You should not initialize the repository with a README file because one will be added by the Theme later. Note the URL for this project, by clicking the down-arrow on the green Clone or download button and choose the SSH URL, like git@github.com:your_name/example_theme.git . Connect to your Theme MODX project SSH into your Cloud, and switch to the www/ webroot directory. Then initialize git with the following command, using the SSH URL from above: git init git remote add origin git@github.com:your_name/example_theme.git Git Ignore Create a .gitingnore file to exclude MODX and other files that are not needed with the following content. Make sure to change !/assets/themes/{{your-theme-name}} to its actual name like !/assets/themes/lightcoral : # MODX Gitify # ################# /_backup /config.core.php /connectors /core /ht.access /index.php /manager /assets/* !/assets/themes/{{your-theme-name}} # IDE files (optional or add more # ################################### .idea .vscode .settings nbproject .project # OS generated files (optional) # ################################# .DS_Store .DS_Store? ._* .Spotlight-V100 .Trashes ehthumbs.db Thumbs.db node_modules npm-debug.log .sass-cache The Gitify YAML configruation Create a yaml file named .gitify file in the webroot directory with following content: data_directory: _data/ backup_directory: _backup/ data: fred_themes: class: FredTheme primary: id exclude_keys: ['config'] package: fred fred_element_categories: class: FredElementCategory primary: id fred_element_option_sets: class: FredElementOptionSet primary: id extension: .json fred_element_rte_configs: class: FredElementRTEConfig primary: id extension: .json fred_elements: class: FredElement primary: id extension: .html fred_blueprint_categories: class: FredBlueprintCategory primary: id fred_blueprints: class: FredBlueprint primary: id extension: .json This will instruct Gitify to include all Elements and categories, their Option Sets, public Blueprints and categories, RTE configs, and the Themes. Media sources are not currently supported for Theme exports and are therefore omitted. Intial Commit Now it\u2019s time to push the code to the source repo. Once you\u2019ve reached a point where you are ready to share and collaborate on a theme, execute the following: cd ~/www gitify extract git add --all # or git add on files you want to commit git commit -m Initalize My Awesome Theme # please write your own message git push origin master Now you are ready to start working with others .","title":"Getting your Theme in Git"},{"location":"collab/initial_extract/#setting-up-a-theme-to-work-with-gitify","text":"Start by clicking the green New button when signed into Github. Give your new repository a name and description. This will be the source \u201corigin\u201d for collaborators. You should not initialize the repository with a README file because one will be added by the Theme later. Note the URL for this project, by clicking the down-arrow on the green Clone or download button and choose the SSH URL, like git@github.com:your_name/example_theme.git .","title":"Setting up a Theme to work with Gitify"},{"location":"collab/initial_extract/#connect-to-your-theme-modx-project","text":"SSH into your Cloud, and switch to the www/ webroot directory. Then initialize git with the following command, using the SSH URL from above: git init git remote add origin git@github.com:your_name/example_theme.git","title":"Connect to your Theme MODX project"},{"location":"collab/initial_extract/#git-ignore","text":"Create a .gitingnore file to exclude MODX and other files that are not needed with the following content. Make sure to change !/assets/themes/{{your-theme-name}} to its actual name like !/assets/themes/lightcoral : # MODX Gitify # ################# /_backup /config.core.php /connectors /core /ht.access /index.php /manager /assets/* !/assets/themes/{{your-theme-name}} # IDE files (optional or add more # ################################### .idea .vscode .settings nbproject .project # OS generated files (optional) # ################################# .DS_Store .DS_Store? ._* .Spotlight-V100 .Trashes ehthumbs.db Thumbs.db node_modules npm-debug.log .sass-cache","title":"Git Ignore"},{"location":"collab/initial_extract/#the-gitify-yaml-configruation","text":"Create a yaml file named .gitify file in the webroot directory with following content: data_directory: _data/ backup_directory: _backup/ data: fred_themes: class: FredTheme primary: id exclude_keys: ['config'] package: fred fred_element_categories: class: FredElementCategory primary: id fred_element_option_sets: class: FredElementOptionSet primary: id extension: .json fred_element_rte_configs: class: FredElementRTEConfig primary: id extension: .json fred_elements: class: FredElement primary: id extension: .html fred_blueprint_categories: class: FredBlueprintCategory primary: id fred_blueprints: class: FredBlueprint primary: id extension: .json This will instruct Gitify to include all Elements and categories, their Option Sets, public Blueprints and categories, RTE configs, and the Themes. Media sources are not currently supported for Theme exports and are therefore omitted.","title":"The Gitify YAML configruation"},{"location":"collab/initial_extract/#intial-commit","text":"Now it\u2019s time to push the code to the source repo. Once you\u2019ve reached a point where you are ready to share and collaborate on a theme, execute the following: cd ~/www gitify extract git add --all # or git add on files you want to commit git commit -m Initalize My Awesome Theme # please write your own message git push origin master Now you are ready to start working with others .","title":"Intial Commit"},{"location":"collab/pr_workflow/","text":"Using Gitify to Collaborate with Pull Requests Some projects will require you to submit a Pull Request (PR) to their repository. You do this by forking the repo, making changes in a feature branch in your fork, then submitting the PR to the original project. For the purpose of this tutorial, we\u2019ll fork the Fred Starter Theme which is intended to be a Bootstrap 4 quickstart for theme builders. Start by signing into Github. Fork and clone to a MODX instance To start with PRs, you need to fork a repository and work on feature branches before you can submit PRs successfully. 1. Fork a repository Fork the repository you wish to contribute to on Github: For example, visit the Fred Theme Starter and click the fork button in the upper right. Click the down-arrow on the green Clone or download button on a source Github project and copy the HTTPS URL which looks like https://github.com/modxcms/fred-theme-starter.git for use later. You\u2019ll also need your fork\u2019s SSH URL, found in the same location, for example git@github.com:your_username/your-fork-name.git . 2. Clone your fork to your MODX instance Because git clone only works in empty directories, we\u2019ll use a temporary tmp/ directory and move the files to the web root when done. Open an SSH connection to your working Cloud instance and execute: cd ~/www git clone git@github.com:your_username/your-fork-name.git tmp This will download the theme repository into a ~/www/tmp/ directory in the Cloud. Next, move the contents of tmp/ to the correct location under www/ : rsync -av ./tmp ./ Make sure the .git/ directory and files are moved under webroot www/ directory. Once you confirm the files and directories are in the right place, go ahead and remove the tmp/ directory with rm -rf ./tmp . 3. Add the upstream remote This is the original project. Use its HTTPS clone URL from step 1 of this tutorial to set the remote upstream: git remote add upstream https://github.com/modxcms/fred-theme-starter.git Working with your fork Syncing is important, but how you sync depends on the state of your work: if you have made changes that have not been pushed, or if you are syncing ahead of starting work (no changes). No changes: Sync the upstream remote to your fork For the purposes of working with PRs, you should never commit directly to your master branch; for more information see the Feature Branches and Pull Requests: Walkthrough and Understanding the GitHub flow guides. Before pushing any work to a feature branch, you should sync your local repository with the upstream. For more information on syncing forks see the Syncing a fork guide: git checkout master git fetch upstream git merge --ff-only upstream/master # only merges if local is clean git push origin master # push to your fork gitify package:install --all gitify build These commands are only needed when there is a differnce between the commit version in the upstream remote and your local fork. It will not hurt to run them every time though. Local changes: Sync the upstream remote to your fork The following commands create your local feature branch, and commits them to the local git repo. cd ~/www git checkout -b my-feature # checkout to a new branch named `my-feature`, # or any other name you decide for your work gitify extract # extract all your local changes git add --all # or git add only specific changed files git commit -m My Changes # Use a more reasonable commit message Next, we sync upstream master branch with your fork. git checkout master git fetch upstream git merge --ff-only upstream/master git push origin master Now, we sync the feature branch with any changes from the master branch of the fork from the previous merge step. git checkout my-feature # checkout your `my-feature` branch again git rebase master # this pulls from your forked master``` This may result in conflicts that will be noted. If there are conflicts, they must be resolved before you can continue. A conflict happens when two people change the same line of code. For information on resolving conflicts, please see Github\u2019s guide to resolving conflicts . Finally, we build all the changes into your working MODX instance with Gitify. gitify package:install --all gitify build Double check to make sure the Theme and the changes still work as expected. Then commit them to your Github fork, where it can then be submitted as a PR to the original upstream project: git push origin my-feature # push to your `my-feature` branch on Github to # submit as a PR, per the next section below git checkout master # return to the master branch to start your next gitify package:install --all # restore the `master` state to your local MODX gitify build Now submit the PR to the upstream project. Submit a PR to the upstream project Open your fork on Github. There should be a notification about creating a PR from newly created branch. Click that and submit the PR to the appropriate branch, most likely master or as specified in the original repository README.","title":"Advaced Gitify with PRs"},{"location":"collab/pr_workflow/#using-gitify-to-collaborate-with-pull-requests","text":"Some projects will require you to submit a Pull Request (PR) to their repository. You do this by forking the repo, making changes in a feature branch in your fork, then submitting the PR to the original project. For the purpose of this tutorial, we\u2019ll fork the Fred Starter Theme which is intended to be a Bootstrap 4 quickstart for theme builders. Start by signing into Github.","title":"Using Gitify to Collaborate with Pull Requests"},{"location":"collab/pr_workflow/#fork-and-clone-to-a-modx-instance","text":"To start with PRs, you need to fork a repository and work on feature branches before you can submit PRs successfully.","title":"Fork and clone to a MODX instance"},{"location":"collab/pr_workflow/#1-fork-a-repository","text":"Fork the repository you wish to contribute to on Github: For example, visit the Fred Theme Starter and click the fork button in the upper right. Click the down-arrow on the green Clone or download button on a source Github project and copy the HTTPS URL which looks like https://github.com/modxcms/fred-theme-starter.git for use later. You\u2019ll also need your fork\u2019s SSH URL, found in the same location, for example git@github.com:your_username/your-fork-name.git .","title":"1. Fork a repository"},{"location":"collab/pr_workflow/#2-clone-your-fork-to-your-modx-instance","text":"Because git clone only works in empty directories, we\u2019ll use a temporary tmp/ directory and move the files to the web root when done. Open an SSH connection to your working Cloud instance and execute: cd ~/www git clone git@github.com:your_username/your-fork-name.git tmp This will download the theme repository into a ~/www/tmp/ directory in the Cloud. Next, move the contents of tmp/ to the correct location under www/ : rsync -av ./tmp ./ Make sure the .git/ directory and files are moved under webroot www/ directory. Once you confirm the files and directories are in the right place, go ahead and remove the tmp/ directory with rm -rf ./tmp .","title":"2. Clone your fork to your MODX instance"},{"location":"collab/pr_workflow/#3-add-the-upstream-remote","text":"This is the original project. Use its HTTPS clone URL from step 1 of this tutorial to set the remote upstream: git remote add upstream https://github.com/modxcms/fred-theme-starter.git","title":"3. Add the upstream remote"},{"location":"collab/pr_workflow/#working-with-your-fork","text":"Syncing is important, but how you sync depends on the state of your work: if you have made changes that have not been pushed, or if you are syncing ahead of starting work (no changes).","title":"Working with your fork"},{"location":"collab/pr_workflow/#no-changes-sync-the-upstream-remote-to-your-fork","text":"For the purposes of working with PRs, you should never commit directly to your master branch; for more information see the Feature Branches and Pull Requests: Walkthrough and Understanding the GitHub flow guides. Before pushing any work to a feature branch, you should sync your local repository with the upstream. For more information on syncing forks see the Syncing a fork guide: git checkout master git fetch upstream git merge --ff-only upstream/master # only merges if local is clean git push origin master # push to your fork gitify package:install --all gitify build These commands are only needed when there is a differnce between the commit version in the upstream remote and your local fork. It will not hurt to run them every time though.","title":"No changes: Sync the upstream remote to your fork"},{"location":"collab/pr_workflow/#local-changes-sync-the-upstream-remote-to-your-fork","text":"The following commands create your local feature branch, and commits them to the local git repo. cd ~/www git checkout -b my-feature # checkout to a new branch named `my-feature`, # or any other name you decide for your work gitify extract # extract all your local changes git add --all # or git add only specific changed files git commit -m My Changes # Use a more reasonable commit message Next, we sync upstream master branch with your fork. git checkout master git fetch upstream git merge --ff-only upstream/master git push origin master Now, we sync the feature branch with any changes from the master branch of the fork from the previous merge step. git checkout my-feature # checkout your `my-feature` branch again git rebase master # this pulls from your forked master``` This may result in conflicts that will be noted. If there are conflicts, they must be resolved before you can continue. A conflict happens when two people change the same line of code. For information on resolving conflicts, please see Github\u2019s guide to resolving conflicts . Finally, we build all the changes into your working MODX instance with Gitify. gitify package:install --all gitify build Double check to make sure the Theme and the changes still work as expected. Then commit them to your Github fork, where it can then be submitted as a PR to the original upstream project: git push origin my-feature # push to your `my-feature` branch on Github to # submit as a PR, per the next section below git checkout master # return to the master branch to start your next gitify package:install --all # restore the `master` state to your local MODX gitify build Now submit the PR to the upstream project.","title":"Local changes: Sync the upstream remote to your fork"},{"location":"collab/pr_workflow/#submit-a-pr-to-the-upstream-project","text":"Open your fork on Github. There should be a notification about creating a PR from newly created branch. Click that and submit the PR to the appropriate branch, most likely master or as specified in the original repository README.","title":"Submit a PR to the upstream project"},{"location":"site_admin/acls/howto/","text":"Permissions in Fred When installing Fred the first time, it adds a Fred Admin policy to all contexts for the Administrators User Group. This policy enables any member with a Super User Role full access to Fred both in the Manager and in all front-end Contexts. It also creates a more-limited Fred Editor policy intended for users that do not need to set up Fred. Setting up Fred involves creating new Elements, Option Sets, and other admin functions. Limiting Fred to Specific Contexts By default, the Fred Admin policy applies to all existing Contexts. If you do not need to manage all Contexts with Fred remove this Policy from the Administrators User Group; if you create a new Context that needs to be managed by Fred add this policy to the Administrators Group after creating the Context. To enable Fred for members who are not Administrators Group members, add a Fred Policy to their User Group and to the specific Contexts you wish to be managed by Fred. Manager and Front-end Access Web developers and theme creators use the Fred Extra in the Manager to configure Fred and create Themes. Once a site is set up, however, daily content creation and edits using Fred may not require Manager access. If you wish for users to only work with Fred from the front-end, you need to take two steps: Install the Login Extra to add a front-end login for content authors and editors. Assign one of the Fred Policies to the web or other Contexts. Creating Custom Fred Policies The built-in Fred Policies may not be sufficient for all sites. Fortunately, creating custom Fred Policies is straightforward. In the Manager, select the ACLs menu under the gear icon in the upper right. Click the Access Policies tab. Click the Create Access Policy button, fill the policy name and select Fred as the Policy Template. This Policy Template contains all the possible permissions you need to customize how you configure it for your users. When you save the policy, it appears in the table. Right-click it and select Update Policy from the contextual menu. Enable or disable the permissions by unchecking the ones you wish to restrict from your users.","title":"How To"},{"location":"site_admin/acls/howto/#permissions-in-fred","text":"When installing Fred the first time, it adds a Fred Admin policy to all contexts for the Administrators User Group. This policy enables any member with a Super User Role full access to Fred both in the Manager and in all front-end Contexts. It also creates a more-limited Fred Editor policy intended for users that do not need to set up Fred. Setting up Fred involves creating new Elements, Option Sets, and other admin functions.","title":"Permissions in Fred"},{"location":"site_admin/acls/howto/#limiting-fred-to-specific-contexts","text":"By default, the Fred Admin policy applies to all existing Contexts. If you do not need to manage all Contexts with Fred remove this Policy from the Administrators User Group; if you create a new Context that needs to be managed by Fred add this policy to the Administrators Group after creating the Context. To enable Fred for members who are not Administrators Group members, add a Fred Policy to their User Group and to the specific Contexts you wish to be managed by Fred.","title":"Limiting Fred to Specific Contexts"},{"location":"site_admin/acls/howto/#manager-and-front-end-access","text":"Web developers and theme creators use the Fred Extra in the Manager to configure Fred and create Themes. Once a site is set up, however, daily content creation and edits using Fred may not require Manager access. If you wish for users to only work with Fred from the front-end, you need to take two steps: Install the Login Extra to add a front-end login for content authors and editors. Assign one of the Fred Policies to the web or other Contexts.","title":"Manager and Front-end Access"},{"location":"site_admin/acls/howto/#creating-custom-fred-policies","text":"The built-in Fred Policies may not be sufficient for all sites. Fortunately, creating custom Fred Policies is straightforward. In the Manager, select the ACLs menu under the gear icon in the upper right. Click the Access Policies tab. Click the Create Access Policy button, fill the policy name and select Fred as the Policy Template. This Policy Template contains all the possible permissions you need to customize how you configure it for your users. When you save the policy, it appears in the table. Right-click it and select Update Policy from the contextual menu. Enable or disable the permissions by unchecking the ones you wish to restrict from your users.","title":"Creating Custom Fred Policies"},{"location":"site_admin/acls/permissions/","text":"Permissions The following sections list the permissions available for Fred. The subhead is the permission key used in code, followed by a brief description of where and what those permissions control Most of these permissions can be used both with the mgr context and front-end contexts like web . However there are few that only apply to mgr or front-end contexts. For example, if you apply the fred permission to the mgr Context, users will see the Fred Extra in the Manager. If you apply it to a front-end context, the Fred controls will apear when browsing the site from the front-end (if assigned to a page\u2019s Template). Applying the fred_settings permission to mgr context will do nothing as this permission is only used in front-end to be able to see the Settings tab in the sidebar menu. General Permissions fred View Fred (mgr) (web) fred_settings View the Settings menu in the sidebar (web) fred_settings_advanced View the Advanced Settings under the Settings menu (web) fred_settings_tvs View the TVs section under the Settings menu (web) fred_settings_tags View the Tags section under the Settings menu (web) fred_media_sources View Media Sources (mgr) Element Permissions fred_elements View Elements (mgr) (web) fred_element_save Create/edit/duplicate Elements (mgr) fred_element_delete Delete Elements (mgr) fred_element_screenshot Take a screenshot to replace the current sidebar preview for Elements (web) fred_element_move Drag and drop Elements into drop zones (web) fred_element_rebuild View the Rebuild tab (mgr) Element Category Permissions fred_element_categories View Fred Element Categories (mgr) fred_element_category_save Create/edit/duplicate Element (mgr) fred_element_category_delete Delete Element Categories (mgr) RTE Config Permissions fred_element_rtes View RTE configs (mgr) fred_element_rte_config_save Create/edit/duplicate RTE configs (mgr) fred_element_rte_config_delete Delete RTE configs (mgr) Option Sets Permissions fred_element_option_sets View Option Sets (mgr) fred_element_option_sets_save Create/edit/duplicate Option Sets (mgr) fred_element_option_sets_delete Delete Option Sets (mgr) Blueprints Permissions fred_blueprints View Blueprints (mgr) (web) fred_blueprints_save Create/edit/duplicate Blueprints (mgr) (web) fred_blueprints_delete Delete Blueprints (mgr) fred_blueprints_create_public Create public Blueprints (mgr) (web) Blueprint Category Permissions fred_blueprint_categories View Blueprint Categories (mgr) fred_blueprint_categories_save Create/edit/duplicate Blueprint Categories (mgr) (web) fred_blueprint_categories_delete Delete Blueprint Categories (mgr) fred_blueprint_categories_create_public Create Public Blueprint Categories (mgr) (web) Theme Permissions fred_themes View the Themes tab (mgr) fred_themes_save Create/edit/duplicate Themes (mgr) fred_themes_delete Delete Themes (mgr) fred_themes_build Build Themes (mgr) Themed Template Permissions fred_themed_templates View Theme/Template assignments (mgr) fred_themed_templates_save Assign/Update Fred Themes to MODX Templates (mgr) fred_themed_templates_delete Unassign Theme from MODX Templates (mgr) MODX Permissions new_document Create new Resources (mgr) (web) new_document_in_root Create Resources in the top-level of web root (mgr) (web) save_document Save Resources (mgr) (web) view_unpublished View unpublished Resources (web) resource_duplicate Duplicate Resources (mgr) (web) publish_document Publish Resources (mgr) (web) unpublish_document Unpublish Resources (mgr) (web) delete_document Delete Resources (mgr) (web) undelete_document Undelete Resources (mgr) (web)","title":"Permissions"},{"location":"site_admin/acls/permissions/#permissions","text":"The following sections list the permissions available for Fred. The subhead is the permission key used in code, followed by a brief description of where and what those permissions control Most of these permissions can be used both with the mgr context and front-end contexts like web . However there are few that only apply to mgr or front-end contexts. For example, if you apply the fred permission to the mgr Context, users will see the Fred Extra in the Manager. If you apply it to a front-end context, the Fred controls will apear when browsing the site from the front-end (if assigned to a page\u2019s Template). Applying the fred_settings permission to mgr context will do nothing as this permission is only used in front-end to be able to see the Settings tab in the sidebar menu.","title":"Permissions"},{"location":"site_admin/acls/permissions/#general-permissions","text":"","title":"General Permissions"},{"location":"site_admin/acls/permissions/#fred","text":"View Fred (mgr) (web)","title":"fred"},{"location":"site_admin/acls/permissions/#fred_settings","text":"View the Settings menu in the sidebar (web)","title":"fred_settings"},{"location":"site_admin/acls/permissions/#fred_settings_advanced","text":"View the Advanced Settings under the Settings menu (web)","title":"fred_settings_advanced"},{"location":"site_admin/acls/permissions/#fred_settings_tvs","text":"View the TVs section under the Settings menu (web)","title":"fred_settings_tvs"},{"location":"site_admin/acls/permissions/#fred_settings_tags","text":"View the Tags section under the Settings menu (web)","title":"fred_settings_tags"},{"location":"site_admin/acls/permissions/#fred_media_sources","text":"View Media Sources (mgr)","title":"fred_media_sources"},{"location":"site_admin/acls/permissions/#element-permissions","text":"","title":"Element Permissions"},{"location":"site_admin/acls/permissions/#fred_elements","text":"View Elements (mgr) (web)","title":"fred_elements"},{"location":"site_admin/acls/permissions/#fred_element_save","text":"Create/edit/duplicate Elements (mgr)","title":"fred_element_save"},{"location":"site_admin/acls/permissions/#fred_element_delete","text":"Delete Elements (mgr)","title":"fred_element_delete"},{"location":"site_admin/acls/permissions/#fred_element_screenshot","text":"Take a screenshot to replace the current sidebar preview for Elements (web)","title":"fred_element_screenshot"},{"location":"site_admin/acls/permissions/#fred_element_move","text":"Drag and drop Elements into drop zones (web)","title":"fred_element_move"},{"location":"site_admin/acls/permissions/#fred_element_rebuild","text":"View the Rebuild tab (mgr)","title":"fred_element_rebuild"},{"location":"site_admin/acls/permissions/#element-category-permissions","text":"","title":"Element Category Permissions"},{"location":"site_admin/acls/permissions/#fred_element_categories","text":"View Fred Element Categories (mgr)","title":"fred_element_categories"},{"location":"site_admin/acls/permissions/#fred_element_category_save","text":"Create/edit/duplicate Element (mgr)","title":"fred_element_category_save"},{"location":"site_admin/acls/permissions/#fred_element_category_delete","text":"Delete Element Categories (mgr)","title":"fred_element_category_delete"},{"location":"site_admin/acls/permissions/#rte-config-permissions","text":"","title":"RTE Config Permissions"},{"location":"site_admin/acls/permissions/#fred_element_rtes","text":"View RTE configs (mgr)","title":"fred_element_rtes"},{"location":"site_admin/acls/permissions/#fred_element_rte_config_save","text":"Create/edit/duplicate RTE configs (mgr)","title":"fred_element_rte_config_save"},{"location":"site_admin/acls/permissions/#fred_element_rte_config_delete","text":"Delete RTE configs (mgr)","title":"fred_element_rte_config_delete"},{"location":"site_admin/acls/permissions/#option-sets-permissions","text":"","title":"Option Sets Permissions"},{"location":"site_admin/acls/permissions/#fred_element_option_sets","text":"View Option Sets (mgr)","title":"fred_element_option_sets"},{"location":"site_admin/acls/permissions/#fred_element_option_sets_save","text":"Create/edit/duplicate Option Sets (mgr)","title":"fred_element_option_sets_save"},{"location":"site_admin/acls/permissions/#fred_element_option_sets_delete","text":"Delete Option Sets (mgr)","title":"fred_element_option_sets_delete"},{"location":"site_admin/acls/permissions/#blueprints-permissions","text":"","title":"Blueprints Permissions"},{"location":"site_admin/acls/permissions/#fred_blueprints","text":"View Blueprints (mgr) (web)","title":"fred_blueprints"},{"location":"site_admin/acls/permissions/#fred_blueprints_save","text":"Create/edit/duplicate Blueprints (mgr) (web)","title":"fred_blueprints_save"},{"location":"site_admin/acls/permissions/#fred_blueprints_delete","text":"Delete Blueprints (mgr)","title":"fred_blueprints_delete"},{"location":"site_admin/acls/permissions/#fred_blueprints_create_public","text":"Create public Blueprints (mgr) (web)","title":"fred_blueprints_create_public"},{"location":"site_admin/acls/permissions/#blueprint-category-permissions","text":"","title":"Blueprint Category Permissions"},{"location":"site_admin/acls/permissions/#fred_blueprint_categories","text":"View Blueprint Categories (mgr)","title":"fred_blueprint_categories"},{"location":"site_admin/acls/permissions/#fred_blueprint_categories_save","text":"Create/edit/duplicate Blueprint Categories (mgr) (web)","title":"fred_blueprint_categories_save"},{"location":"site_admin/acls/permissions/#fred_blueprint_categories_delete","text":"Delete Blueprint Categories (mgr)","title":"fred_blueprint_categories_delete"},{"location":"site_admin/acls/permissions/#fred_blueprint_categories_create_public","text":"Create Public Blueprint Categories (mgr) (web)","title":"fred_blueprint_categories_create_public"},{"location":"site_admin/acls/permissions/#theme-permissions","text":"","title":"Theme Permissions"},{"location":"site_admin/acls/permissions/#fred_themes","text":"View the Themes tab (mgr)","title":"fred_themes"},{"location":"site_admin/acls/permissions/#fred_themes_save","text":"Create/edit/duplicate Themes (mgr)","title":"fred_themes_save"},{"location":"site_admin/acls/permissions/#fred_themes_delete","text":"Delete Themes (mgr)","title":"fred_themes_delete"},{"location":"site_admin/acls/permissions/#fred_themes_build","text":"Build Themes (mgr)","title":"fred_themes_build"},{"location":"site_admin/acls/permissions/#themed-template-permissions","text":"","title":"Themed Template Permissions"},{"location":"site_admin/acls/permissions/#fred_themed_templates","text":"View Theme/Template assignments (mgr)","title":"fred_themed_templates"},{"location":"site_admin/acls/permissions/#fred_themed_templates_save","text":"Assign/Update Fred Themes to MODX Templates (mgr)","title":"fred_themed_templates_save"},{"location":"site_admin/acls/permissions/#fred_themed_templates_delete","text":"Unassign Theme from MODX Templates (mgr)","title":"fred_themed_templates_delete"},{"location":"site_admin/acls/permissions/#modx-permissions","text":"","title":"MODX Permissions"},{"location":"site_admin/acls/permissions/#new_document","text":"Create new Resources (mgr) (web)","title":"new_document"},{"location":"site_admin/acls/permissions/#new_document_in_root","text":"Create Resources in the top-level of web root (mgr) (web)","title":"new_document_in_root"},{"location":"site_admin/acls/permissions/#save_document","text":"Save Resources (mgr) (web)","title":"save_document"},{"location":"site_admin/acls/permissions/#view_unpublished","text":"View unpublished Resources (web)","title":"view_unpublished"},{"location":"site_admin/acls/permissions/#resource_duplicate","text":"Duplicate Resources (mgr) (web)","title":"resource_duplicate"},{"location":"site_admin/acls/permissions/#publish_document","text":"Publish Resources (mgr) (web)","title":"publish_document"},{"location":"site_admin/acls/permissions/#unpublish_document","text":"Unpublish Resources (mgr) (web)","title":"unpublish_document"},{"location":"site_admin/acls/permissions/#delete_document","text":"Delete Resources (mgr) (web)","title":"delete_document"},{"location":"site_admin/acls/permissions/#undelete_document","text":"Undelete Resources (mgr) (web)","title":"undelete_document"},{"location":"site_admin/acls/policies/","text":"Default Policies Fred Admin This Admin policy has all permissions enabled. Users are not limited in any way when using Fred. Fred Editor A Fred Editor user is able to view Fred and all page settings in the front-end, create and use Elements and Blueprints and create new pages. The complete list of permissions for this Policy: fred fred_settings fred_settings_advanced fred_settings_tags fred_settings_tvs fred_elements fred_element_save fred_element_move fred_element_categories fred_element_category_save fred_blueprints fred_blueprints_save fred_blueprints_create_public fred_blueprint_categories fred_blueprint_categories_save fred_blueprint_categories_create_public fred_themed_templates new_document save_document resource_duplicate view_unpublished delete_document","title":"Default Policies"},{"location":"site_admin/acls/policies/#default-policies","text":"","title":"Default Policies"},{"location":"site_admin/acls/policies/#fred-admin","text":"This Admin policy has all permissions enabled. Users are not limited in any way when using Fred.","title":"Fred Admin"},{"location":"site_admin/acls/policies/#fred-editor","text":"A Fred Editor user is able to view Fred and all page settings in the front-end, create and use Elements and Blueprints and create new pages. The complete list of permissions for this Policy: fred fred_settings fred_settings_advanced fred_settings_tags fred_settings_tvs fred_elements fred_element_save fred_element_move fred_element_categories fred_element_category_save fred_blueprints fred_blueprints_save fred_blueprints_create_public fred_blueprint_categories fred_blueprint_categories_save fred_blueprint_categories_create_public fred_themed_templates new_document save_document resource_duplicate view_unpublished delete_document","title":"Fred Editor"},{"location":"themer/","text":"Creating a Theme for Fred Fred themers should have a basic understand of MODX, be proficient with HTML/CSS markup for creating Elements, and be able to create valid JSON for Option Sets. Intermediate Fred themers will use Twig to create conditional logic in Elements. This can be used to show or hide things based on the settings of the controls in Option Sets. Suggested Workflow The easiest way to familiarize yourself with developing for Fred is to install a Theme, duplicate it, then edit and add to the copy to see how things work. We suggest installing the Ace Extra as it gives you a nice code editor interface including warnings for invalid JSON and code hints when creating Elements in the Manager. Code Hinting in Fred As mentioned above, Fred will offer attribute-completion and code hints when working in the Manager: Download and install the Fred Ace Integration from the MODX Extras provider. When creating or editing Elements, start typing data- or fred and hit ctrl + space to show list of all fred attributes. JavaScript Events for Fred Elements Elements support JavaScript Events \u2014a precursor to full Fred Plugin support.","title":"Intro to Fred Themes"},{"location":"themer/#creating-a-theme-for-fred","text":"Fred themers should have a basic understand of MODX, be proficient with HTML/CSS markup for creating Elements, and be able to create valid JSON for Option Sets. Intermediate Fred themers will use Twig to create conditional logic in Elements. This can be used to show or hide things based on the settings of the controls in Option Sets.","title":"Creating a Theme for Fred"},{"location":"themer/#suggested-workflow","text":"The easiest way to familiarize yourself with developing for Fred is to install a Theme, duplicate it, then edit and add to the copy to see how things work. We suggest installing the Ace Extra as it gives you a nice code editor interface including warnings for invalid JSON and code hints when creating Elements in the Manager.","title":"Suggested Workflow"},{"location":"themer/#code-hinting-in-fred","text":"As mentioned above, Fred will offer attribute-completion and code hints when working in the Manager: Download and install the Fred Ace Integration from the MODX Extras provider. When creating or editing Elements, start typing data- or fred and hit ctrl + space to show list of all fred attributes.","title":"Code Hinting in Fred"},{"location":"themer/#javascript-events-for-fred-elements","text":"Elements support JavaScript Events \u2014a precursor to full Fred Plugin support.","title":"JavaScript Events for Fred Elements"},{"location":"themer/convert-to-fred/","text":"Convert an Existing MODX Site to Fred Fred allows you to convert existing standard resources into Fred resources. You can make Fred as open or restricted as you want when it comes to controlling the layout of a page. It is possible to just limit Fred to a set content area, similiar to how you would use an RTE currently. Tips Here are some tips for converting your site to Fred. Default Element When converting existing pages to Fred, you will want to specify a Default Element in the Themes grid, see documentation . Without a default element set, your content will disappear when switching a resource to Fred. The Default Element works by detecting there are no Fred elements currently in place, then selecting the default element and putting any content from the resource into the object specified by the data-fred-name option. Templates Generally, you will want to create a new template or duplicate an existing template when converting content to Fred. This way you can maintain a hybrid and not potentially break content during the transition. Themes One important note about themes is that multiple Templates can be specified per theme, but if a Fred resource is changed to a Template with a different theme, it has the potential to lose its elements. This is because Elements are assigned to a specific theme, so the new theme wouldn't have access to the old elements.","title":"Convert Existing Sites to Fred"},{"location":"themer/convert-to-fred/#convert-an-existing-modx-site-to-fred","text":"Fred allows you to convert existing standard resources into Fred resources. You can make Fred as open or restricted as you want when it comes to controlling the layout of a page. It is possible to just limit Fred to a set content area, similiar to how you would use an RTE currently.","title":"Convert an Existing MODX Site to Fred"},{"location":"themer/convert-to-fred/#tips","text":"Here are some tips for converting your site to Fred.","title":"Tips"},{"location":"themer/convert-to-fred/#default-element","text":"When converting existing pages to Fred, you will want to specify a Default Element in the Themes grid, see documentation . Without a default element set, your content will disappear when switching a resource to Fred. The Default Element works by detecting there are no Fred elements currently in place, then selecting the default element and putting any content from the resource into the object specified by the data-fred-name option.","title":"Default Element"},{"location":"themer/convert-to-fred/#templates","text":"Generally, you will want to create a new template or duplicate an existing template when converting content to Fred. This way you can maintain a hybrid and not potentially break content during the transition.","title":"Templates"},{"location":"themer/convert-to-fred/#themes","text":"One important note about themes is that multiple Templates can be specified per theme, but if a Fred resource is changed to a Template with a different theme, it has the potential to lose its elements. This is because Elements are assigned to a specific theme, so the new theme wouldn't have access to the old elements.","title":"Themes"},{"location":"themer/themes/","text":"Theme Creation Tutorial Once you have created a design you are happy with, it is straightforward to build a Theme to share. To start creating a theme, follow the steps below: Install Fred from MODX.com , the icon picker and TinyMCE RTE Set up a MODX Template with a content Dropzone Assign this Template to a Fred Theme Create Categories for your Fred Elements Create Fred Elements Step 1: Install Fred Fred is available as a transport package. In your MODX installation, go to Extras Installer and click on the Download Extras button. Search to find bring up Fred. You should also see other Extras listed made for Fred, such as a Font Awesome icon picker and a TinyMCE RTE. If you decide to add these also, follow their setup instructions. After your Fred Extras finish downloading, install them from the Packages grid. Step 2: Set up a Template Fred needs a \u201cdropzone\u201d to know where content can go, indicated by adding a data-fred-dropzone attribute to an HTML entity, often a div tag. For example, where the [[*content]] tag would normally be in a Template, add the following: div data-fred-dropzone=\"content\" [[*content]] /div Note the value of the data-fred-dropzone=\"content\" attribute indicates where to render your content once you save a page in Fred, in this case, the [[*content]] . Fred also supports multiple Dropzones; see the templates documentation for more information. Step 3: Assign a Template to a Fred Theme In the MODX Manager, go to the Extras menu Fred Themes tab and switch to Themed Templates sidebar Click the Assign Theme to a Template button Select all Templates you wish to use with this Fred Theme Select the Default Theme Click the Save button In the Manager, Resources that use Templates assigned to a Fred Theme should have an \"Open in Fred\" button. From the front-end, you should see either three icons which launch Fred at the bottom-left of the page or a Fred sidebar. Step 4: Create Categories for Elements Fred organizes Elements using categories. Open the Elements Manager Page from the Extras Fred Elements menu, and switch to the Categories tab to create Categories. For example, your categories could look like this: Page Content Intros Images Testimonials \u2026 Fred requires at least one Category before creating actual content Element. Step 5: Create your first Elements Fred Elements can be as simple as raw text or more complex like a responsive product catalog detail page. Let\u2019s start by creating a simple heading Element, often the first thing on a page. Switch to the Elements tab in Element\u2019s CMP ( Extras Fred Elements ) and click the Create Element button. Fill the name ( H1 Heading ), category ( Text ), image ( https://placehold.it/300x150 text=Heading ). Add the following markup: h1 data-fred-name=\"heading\" Hello, world. /h1 Save this Element, go back to the front-end of your Resource, and refresh the page. Click on the orange Elements stacked boxes icon or the MODX icon in the launcher at the bottom left of the page. In the sidebar Elements tab, you should now see the categories you created earlier in step 4. Hover the Text category to see your freshly created H1 Heading Element and drag it into the empty dropzone. Congratulations, you just added your first Element to a page using Fred! Select the placeholder \u201cHello, world.\u201d text and start typing to edit its content. When hovering over an Element, you\u2019ll see an additional toolbar that lets you duplicate, delete, or move the Element on your page. When you\u2019re happy with the new page title, click the green checkbox button to save. Let\u2019s create another Element for a single paragraph: Create an Element under same category with the name Basic Paragraph , https://placehold.it/300x150 text=Paragraph for the image, and p data-fred-name=\"paragraph\" Your content goes here. /p for the markup Save this in the Manager From the front-end, reload the page Drag this new Element beneath the previously created title, and drop it in place Change the text and save Exporting a Theme The Fred Manager Extra (aka, 3rd-party Component or 3PC) allows you share your themes with colleagues or to submit it to the MODX Extras repository: Click on the Themes tab. Find the Theme you\u2019d like to share/publish. Right-click on its name and choose the Build theme option. Fill in the details and choose one of the two export options at the bottom. A MODX Installer-ready theme will be saved to your core/packages/ directory as {{theme-name}}.transport.zip file that you can distribute. You can also choose to build and download, which will also save a copy to your downloads directory on your local computer.","title":"Theme Creation Tutorial"},{"location":"themer/themes/#theme-creation-tutorial","text":"Once you have created a design you are happy with, it is straightforward to build a Theme to share. To start creating a theme, follow the steps below: Install Fred from MODX.com , the icon picker and TinyMCE RTE Set up a MODX Template with a content Dropzone Assign this Template to a Fred Theme Create Categories for your Fred Elements Create Fred Elements","title":"Theme Creation Tutorial"},{"location":"themer/themes/#step-1-install-fred","text":"Fred is available as a transport package. In your MODX installation, go to Extras Installer and click on the Download Extras button. Search to find bring up Fred. You should also see other Extras listed made for Fred, such as a Font Awesome icon picker and a TinyMCE RTE. If you decide to add these also, follow their setup instructions. After your Fred Extras finish downloading, install them from the Packages grid.","title":"Step 1: Install Fred"},{"location":"themer/themes/#step-2-set-up-a-template","text":"Fred needs a \u201cdropzone\u201d to know where content can go, indicated by adding a data-fred-dropzone attribute to an HTML entity, often a div tag. For example, where the [[*content]] tag would normally be in a Template, add the following: div data-fred-dropzone=\"content\" [[*content]] /div Note the value of the data-fred-dropzone=\"content\" attribute indicates where to render your content once you save a page in Fred, in this case, the [[*content]] . Fred also supports multiple Dropzones; see the templates documentation for more information.","title":"Step 2: Set up a Template"},{"location":"themer/themes/#step-3-assign-a-template-to-a-fred-theme","text":"In the MODX Manager, go to the Extras menu Fred Themes tab and switch to Themed Templates sidebar Click the Assign Theme to a Template button Select all Templates you wish to use with this Fred Theme Select the Default Theme Click the Save button In the Manager, Resources that use Templates assigned to a Fred Theme should have an \"Open in Fred\" button. From the front-end, you should see either three icons which launch Fred at the bottom-left of the page or a Fred sidebar.","title":"Step 3: Assign a Template to a Fred Theme"},{"location":"themer/themes/#step-4-create-categories-for-elements","text":"Fred organizes Elements using categories. Open the Elements Manager Page from the Extras Fred Elements menu, and switch to the Categories tab to create Categories. For example, your categories could look like this: Page Content Intros Images Testimonials \u2026 Fred requires at least one Category before creating actual content Element.","title":"Step 4: Create Categories for Elements"},{"location":"themer/themes/#step-5-create-your-first-elements","text":"Fred Elements can be as simple as raw text or more complex like a responsive product catalog detail page. Let\u2019s start by creating a simple heading Element, often the first thing on a page. Switch to the Elements tab in Element\u2019s CMP ( Extras Fred Elements ) and click the Create Element button. Fill the name ( H1 Heading ), category ( Text ), image ( https://placehold.it/300x150 text=Heading ). Add the following markup: h1 data-fred-name=\"heading\" Hello, world. /h1 Save this Element, go back to the front-end of your Resource, and refresh the page. Click on the orange Elements stacked boxes icon or the MODX icon in the launcher at the bottom left of the page. In the sidebar Elements tab, you should now see the categories you created earlier in step 4. Hover the Text category to see your freshly created H1 Heading Element and drag it into the empty dropzone. Congratulations, you just added your first Element to a page using Fred! Select the placeholder \u201cHello, world.\u201d text and start typing to edit its content. When hovering over an Element, you\u2019ll see an additional toolbar that lets you duplicate, delete, or move the Element on your page. When you\u2019re happy with the new page title, click the green checkbox button to save. Let\u2019s create another Element for a single paragraph: Create an Element under same category with the name Basic Paragraph , https://placehold.it/300x150 text=Paragraph for the image, and p data-fred-name=\"paragraph\" Your content goes here. /p for the markup Save this in the Manager From the front-end, reload the page Drag this new Element beneath the previously created title, and drop it in place Change the text and save","title":"Step 5: Create your first Elements"},{"location":"themer/themes/#exporting-a-theme","text":"The Fred Manager Extra (aka, 3rd-party Component or 3PC) allows you share your themes with colleagues or to submit it to the MODX Extras repository: Click on the Themes tab. Find the Theme you\u2019d like to share/publish. Right-click on its name and choose the Build theme option. Fill in the details and choose one of the two export options at the bottom. A MODX Installer-ready theme will be saved to your core/packages/ directory as {{theme-name}}.transport.zip file that you can distribute. You can also choose to build and download, which will also save a copy to your downloads directory on your local computer.","title":"Exporting a Theme"},{"location":"themer/cmp/blueprint_categories/","text":"Blueprints Categories Categories help keep similar items organized. Examples could be: Intro Blocks Galleries Landing Pages Catalog Pages Form Pages Etc. Managing Blueprint Categories Blueprints can be managed from the Manager\u2019s Extras top menu Fred Blueprints tab Blueprint Categories sidebar section. Double-click a value you wish to edit, or click the gear icon to update the Blueprint Category in a modal. To remove a Blueprint Category, click the gear icon, or right-click on the row, and choose the Remove Category icon. WARNING: if you remove a category, all Blueprints attached to it will be removed also, potentially breaking sites.","title":"Blueprint Categories"},{"location":"themer/cmp/blueprint_categories/#blueprints-categories","text":"Categories help keep similar items organized. Examples could be: Intro Blocks Galleries Landing Pages Catalog Pages Form Pages Etc.","title":"Blueprints Categories"},{"location":"themer/cmp/blueprint_categories/#managing-blueprint-categories","text":"Blueprints can be managed from the Manager\u2019s Extras top menu Fred Blueprints tab Blueprint Categories sidebar section. Double-click a value you wish to edit, or click the gear icon to update the Blueprint Category in a modal. To remove a Blueprint Category, click the gear icon, or right-click on the row, and choose the Remove Category icon. WARNING: if you remove a category, all Blueprints attached to it will be removed also, potentially breaking sites.","title":"Managing Blueprint Categories"},{"location":"themer/cmp/blueprints/","text":"Blueprints Blueprints can only be created from the front-end . Theme developers can use Blueprints as sample pages which users in turn use to start building a site more quickly. Blueprints function as a \u201creplace the placeholders\u201d way to create content, comprised of one or more Elements with sample content and images in place. Managing Blueprints Blueprints can be managed from the Manager\u2019s Extras top menu Fred Blueprints tab Blueprints sidebar section. Right-click or click the gear icon to Quick Update the Blueprint in a modal, Update it the page itself, or Remove it to delete it from your Theme.","title":"Blueprints"},{"location":"themer/cmp/blueprints/#blueprints","text":"Blueprints can only be created from the front-end . Theme developers can use Blueprints as sample pages which users in turn use to start building a site more quickly. Blueprints function as a \u201creplace the placeholders\u201d way to create content, comprised of one or more Elements with sample content and images in place.","title":"Blueprints"},{"location":"themer/cmp/blueprints/#managing-blueprints","text":"Blueprints can be managed from the Manager\u2019s Extras top menu Fred Blueprints tab Blueprints sidebar section. Right-click or click the gear icon to Quick Update the Blueprint in a modal, Update it the page itself, or Remove it to delete it from your Theme.","title":"Managing Blueprints"},{"location":"themer/cmp/element_categories/","text":"Element Categories Categories are an organizational strucure for Fred to group items with similar usage. Examples Element categories could be: Headers Page Separators Intro Blocks Galleries Body copy Quotes Forms Etc. Under the Categories leftside tab on main Elements tab you can manage all Categories for Elements in Fred. Please note that if you remove a category, all Elements attached to it will be removed as well, which may break your site.","title":"Element Categories"},{"location":"themer/cmp/element_categories/#element-categories","text":"Categories are an organizational strucure for Fred to group items with similar usage. Examples Element categories could be: Headers Page Separators Intro Blocks Galleries Body copy Quotes Forms Etc. Under the Categories leftside tab on main Elements tab you can manage all Categories for Elements in Fred. Please note that if you remove a category, all Elements attached to it will be removed as well, which may break your site.","title":"Element Categories"},{"location":"themer/cmp/elements/","text":"Elements Elements are the fundamental starting point for Creating Element The following are the properties for each Element: Name - Required. What you wish to call the Element. Description - Optional. A brief description for the Element. Image - Required. If you do not specify an image, a default gray box with the Element name will be created for you. Images are used as the sources for dragging and dropping Elements into your Layouts. Category - Required. Which category to place this Element under. Rank - Optional. The order you wish this Element to show in its category. Markup - Optional. HTML + Twig markup for the Element, including Fred-specific attributes which allow you to control things like save targets, visibility when creating or viewing content, etc. Option Set - Optional. Complete Option Set can be selected here Options Override - Optional. Override selected Option Set, or define one time options for this Element Element images Element images are thumbnail previews used to drag-and-drop onto pages. You can create your own images/previews/screengrabs for Elements, or Fred can create ones for you in one of two ways: a gray box with the Element\u2019s name centered in the gray box (this is the default unless you provide an image) after an Element is used, and if you have the \"Take Screenshots\" permission, clicking the camera icon above the Element when focused. Note: the library used to take screenshots is very good, but it doesn\u2019t understand some CSS properties and may not render the screenshots optimially for your use case. For best results make sure that manual Element screenshots are 500px wide. Updating Elements Elements are like master templates which can be updated at any time. When an Element\u2019s markup or option set is updated, all places in a site should update to reflect these changes. To see the updated results, either resave the page, or use the \"Rebuild\" tab in the Fred 3PC.","title":"Elements"},{"location":"themer/cmp/elements/#elements","text":"Elements are the fundamental starting point for","title":"Elements"},{"location":"themer/cmp/elements/#creating-element","text":"The following are the properties for each Element: Name - Required. What you wish to call the Element. Description - Optional. A brief description for the Element. Image - Required. If you do not specify an image, a default gray box with the Element name will be created for you. Images are used as the sources for dragging and dropping Elements into your Layouts. Category - Required. Which category to place this Element under. Rank - Optional. The order you wish this Element to show in its category. Markup - Optional. HTML + Twig markup for the Element, including Fred-specific attributes which allow you to control things like save targets, visibility when creating or viewing content, etc. Option Set - Optional. Complete Option Set can be selected here Options Override - Optional. Override selected Option Set, or define one time options for this Element","title":"Creating Element"},{"location":"themer/cmp/elements/#element-images","text":"Element images are thumbnail previews used to drag-and-drop onto pages. You can create your own images/previews/screengrabs for Elements, or Fred can create ones for you in one of two ways: a gray box with the Element\u2019s name centered in the gray box (this is the default unless you provide an image) after an Element is used, and if you have the \"Take Screenshots\" permission, clicking the camera icon above the Element when focused. Note: the library used to take screenshots is very good, but it doesn\u2019t understand some CSS properties and may not render the screenshots optimially for your use case. For best results make sure that manual Element screenshots are 500px wide.","title":"Element images"},{"location":"themer/cmp/elements/#updating-elements","text":"Elements are like master templates which can be updated at any time. When an Element\u2019s markup or option set is updated, all places in a site should update to reflect these changes. To see the updated results, either resave the page, or use the \"Rebuild\" tab in the Fred 3PC.","title":"Updating Elements"},{"location":"themer/cmp/media_sources/","text":"","title":"Media Sources"},{"location":"themer/cmp/option_sets/","text":"Option Sets Option Sets allow you to create common configurations and frequently used sub-configs (e.g., color swatch pickers or a list of fonts) for use across multiple Elements. Creating Option Set The following are the avaialble Option Set properties: Name - Required, has to be unique Description - Optional Complete - Yes/No flag, if set to Yes, the Option Set will appear in select box when creating/updating Element. Setting it to No is usefull for partial Option Sets for import only purpose. For the option set content in the textarea below these fields, enter a JSON element that contains all the Element options for the Option Set. It\u2019s very helpful to have the Fred Ace Integration installed in your site. It will show JSON validation errors with icons in the left column next to the line numbers.","title":"Option Sets"},{"location":"themer/cmp/option_sets/#option-sets","text":"Option Sets allow you to create common configurations and frequently used sub-configs (e.g., color swatch pickers or a list of fonts) for use across multiple Elements.","title":"Option Sets"},{"location":"themer/cmp/option_sets/#creating-option-set","text":"The following are the avaialble Option Set properties: Name - Required, has to be unique Description - Optional Complete - Yes/No flag, if set to Yes, the Option Set will appear in select box when creating/updating Element. Setting it to No is usefull for partial Option Sets for import only purpose. For the option set content in the textarea below these fields, enter a JSON element that contains all the Element options for the Option Set. It\u2019s very helpful to have the Fred Ace Integration installed in your site. It will show JSON validation errors with icons in the left column next to the line numbers.","title":"Creating Option Set"},{"location":"themer/cmp/rebuild/","text":"Rebuild Clicking the rebuild theme button will update all Element instances in all Fred pages with the current version of the Element. It can be thought of as similar to clearing the MODX Cache.","title":"Rebuild"},{"location":"themer/cmp/rebuild/#rebuild","text":"Clicking the rebuild theme button will update all Element instances in all Fred pages with the current version of the Element. It can be thought of as similar to clearing the MODX Cache.","title":"Rebuild"},{"location":"themer/cmp/rte_configs/","text":"Rich Text Editor (RTE) Configs Under the RTE Configs tab you can manage all configuration sets for any installed RTEs. RTE configs must have a unique name, which is used in data-fred-rte-config attribute to determin which RTE to use, if any. Make sure RTE configs are valid JSON; you can use JSON Lint as an external service or the ACE editor MODX Extra which shows invalid JSON in the line-number columns as a white X in a red box. Default Configs If you create a config with a same name as your RTE, for example TinyMCE , this config will be used as a default one, overriding its defaults. To learn more about creating RTE configurations, and to see sample configurations for the TinyMCE for Fred Extra, see the RTE examples documentation. Overriding Default Configs Fred option sets can specify the RTE configuration to use for each Element. In addition, a data-fred-rte-config attribute on an HTML Element with a data-fred-name attribue (as long as data-fred-editable is not set to false) will override both the Default and option set specific settings.","title":"RTE Configs"},{"location":"themer/cmp/rte_configs/#rich-text-editor-rte-configs","text":"Under the RTE Configs tab you can manage all configuration sets for any installed RTEs. RTE configs must have a unique name, which is used in data-fred-rte-config attribute to determin which RTE to use, if any. Make sure RTE configs are valid JSON; you can use JSON Lint as an external service or the ACE editor MODX Extra which shows invalid JSON in the line-number columns as a white X in a red box.","title":"Rich Text Editor (RTE) Configs"},{"location":"themer/cmp/rte_configs/#default-configs","text":"If you create a config with a same name as your RTE, for example TinyMCE , this config will be used as a default one, overriding its defaults. To learn more about creating RTE configurations, and to see sample configurations for the TinyMCE for Fred Extra, see the RTE examples documentation.","title":"Default Configs"},{"location":"themer/cmp/rte_configs/#overriding-default-configs","text":"Fred option sets can specify the RTE configuration to use for each Element. In addition, a data-fred-rte-config attribute on an HTML Element with a data-fred-name attribue (as long as data-fred-editable is not set to false) will override both the Default and option set specific settings.","title":"Overriding Default Configs"},{"location":"themer/cmp/themed_templates/","text":"Themed Tempaltes Fred works by assigning Templates to Fred themes. If a page in a MODX site uses a template which is assigned to a Fred Theme, it will show Fred controls when working from the front-end and logged into the MODX Manager. A MODX Template can only be assigned to a single Fred Theme.","title":"Themed Templates"},{"location":"themer/cmp/themed_templates/#themed-tempaltes","text":"Fred works by assigning Templates to Fred themes. If a page in a MODX site uses a template which is assigned to a Fred Theme, it will show Fred controls when working from the front-end and logged into the MODX Manager. A MODX Template can only be assigned to a single Fred Theme.","title":"Themed Tempaltes"},{"location":"themer/cmp/themes/","text":"About Fred Themes While most users will typically only have a single theme, you can have many installed in a site. Themes include all the things needed to create a site except example pages (caveat: see Blueprints below). Being able to have multiple Themes allows Theme Builders to create and release a variety themes that share common options (Option sets) across Elements. What makes up a Theme Themes are made of of multple things: Elements Blueprints MODX Templates and any TVs assigned to them Categories Extras Assets License, Changelog and Readme files When you create a Theme, Fred will automatically create a directory named for the theme in assets/themes/{{theme-name}} . Use this to store all your theme-specific assets like images, css, fonts and javascript. IMPORTANT NOTE: As of 1.0, Fred currently does not support exporting Media Sources. If you have used them in your Theme, please include instructions on setting them up in your README file. Default Element The default element setting allows you to chose a default Fred Element and target area for placing the content on existing documents. The setting is formatted as ID|target where ID is the identification number of the Fred Element and the target is the HTML object within containing a data-fred-name attribute. This is useful for converting a standard resource to Fred, as it will place the existing content in the default element. If you aren't finding the identification number of the Fred Element, right-click on the top of the element grid and make sure the ID column is selected. Elements A Theme Builder will automatically include all Element Categories attached to the Theme with all their Elements . All Option Sets and RTE Configs attached to the Theme will be also included. Blueprints A Theme Builder will automatically include public Blueprint Categories attached to the THeme with all their public Blueprints . Templates and TVs A Theme Builder will include all MODX Templates assigned to the Theme. Any TVs assigned to those MODX Templates will also be included. Categories A User can select any root MODX Category to be included with the Theme. The Theme Builder will then include all child categories, snippets, chunks and plugins assigned to the root or child category. Extras Extras are MODX packages required for your theme to be fully functional. User will need to install all of the listed extras, before he can proceed with installing your Theme. Fred itself will always be a dependency and is included by default. Assets Theme-specific assets like CSS/SASS/SCSS, images, JS and other similar files are packed into each theme in the assets/theme/{{your-theme-name}} directory. License, Changelog and Readme Files These files show when you are installing the Extra from the MODX Package Manager. Build a Theme to Share The Fred Manager Extra (aka, 3rd-party Component or 3PC) allows you share your themes with colleagues or to submit it to the MODX Extras repository: Click on the Themes tab. Find the Theme you\u2019d like to share/publish. Right-click on its name and choose the Build theme option. Fill in the details and choose one of the two export options at the bottom. A MODX Installer-ready theme will be saved to your core/packages/ directory as {{theme-name}}.transport.zip file that you can distribute. You can also choose to build and download, which will also save a copy to your downloads directory on your local computer.","title":"Building Themes"},{"location":"themer/cmp/themes/#about-fred-themes","text":"While most users will typically only have a single theme, you can have many installed in a site. Themes include all the things needed to create a site except example pages (caveat: see Blueprints below). Being able to have multiple Themes allows Theme Builders to create and release a variety themes that share common options (Option sets) across Elements.","title":"About Fred Themes"},{"location":"themer/cmp/themes/#what-makes-up-a-theme","text":"Themes are made of of multple things: Elements Blueprints MODX Templates and any TVs assigned to them Categories Extras Assets License, Changelog and Readme files When you create a Theme, Fred will automatically create a directory named for the theme in assets/themes/{{theme-name}} . Use this to store all your theme-specific assets like images, css, fonts and javascript. IMPORTANT NOTE: As of 1.0, Fred currently does not support exporting Media Sources. If you have used them in your Theme, please include instructions on setting them up in your README file.","title":"What makes up a Theme"},{"location":"themer/cmp/themes/#default-element","text":"The default element setting allows you to chose a default Fred Element and target area for placing the content on existing documents. The setting is formatted as ID|target where ID is the identification number of the Fred Element and the target is the HTML object within containing a data-fred-name attribute. This is useful for converting a standard resource to Fred, as it will place the existing content in the default element. If you aren't finding the identification number of the Fred Element, right-click on the top of the element grid and make sure the ID column is selected.","title":"Default Element"},{"location":"themer/cmp/themes/#elements","text":"A Theme Builder will automatically include all Element Categories attached to the Theme with all their Elements . All Option Sets and RTE Configs attached to the Theme will be also included.","title":"Elements"},{"location":"themer/cmp/themes/#blueprints","text":"A Theme Builder will automatically include public Blueprint Categories attached to the THeme with all their public Blueprints .","title":"Blueprints"},{"location":"themer/cmp/themes/#templates-and-tvs","text":"A Theme Builder will include all MODX Templates assigned to the Theme. Any TVs assigned to those MODX Templates will also be included.","title":"Templates and TVs"},{"location":"themer/cmp/themes/#categories","text":"A User can select any root MODX Category to be included with the Theme. The Theme Builder will then include all child categories, snippets, chunks and plugins assigned to the root or child category.","title":"Categories"},{"location":"themer/cmp/themes/#extras","text":"Extras are MODX packages required for your theme to be fully functional. User will need to install all of the listed extras, before he can proceed with installing your Theme. Fred itself will always be a dependency and is included by default.","title":"Extras"},{"location":"themer/cmp/themes/#assets","text":"Theme-specific assets like CSS/SASS/SCSS, images, JS and other similar files are packed into each theme in the assets/theme/{{your-theme-name}} directory.","title":"Assets"},{"location":"themer/cmp/themes/#license-changelog-and-readme-files","text":"These files show when you are installing the Extra from the MODX Package Manager.","title":"License, Changelog and Readme Files"},{"location":"themer/cmp/themes/#build-a-theme-to-share","text":"The Fred Manager Extra (aka, 3rd-party Component or 3PC) allows you share your themes with colleagues or to submit it to the MODX Extras repository: Click on the Themes tab. Find the Theme you\u2019d like to share/publish. Right-click on its name and choose the Build theme option. Fill in the details and choose one of the two export options at the bottom. A MODX Installer-ready theme will be saved to your core/packages/ directory as {{theme-name}}.transport.zip file that you can distribute. You can also choose to build and download, which will also save a copy to your downloads directory on your local computer.","title":"Build a Theme to Share"},{"location":"themer/elements/","text":"Elements Elements are the various design patterns used in a Theme. Elements usually include HTML markup and can be configured by using Settings for the Element accessed via the gear icon in the front-end. Elements can also include logic by using Twig in the markup to do things like show or hide certain things depending on the conditions you set in the Settings.","title":"Elements"},{"location":"themer/elements/#elements","text":"Elements are the various design patterns used in a Theme. Elements usually include HTML markup and can be configured by using Settings for the Element accessed via the gear icon in the front-end. Elements can also include logic by using Twig in the markup to do things like show or hide certain things depending on the conditions you set in the Settings.","title":"Elements"},{"location":"themer/elements/attributes/","text":"data-fred-\u2026 Attributes The following are the currently available attributes for Fred Elements. data-fred-editable When set to true the content of the HTML Element will be editable for end users, including any Elements nested within (for nested Dropzones). This attribute has to be used with data-fred-name to save the value. This attribute is set to true by default. Example p data-fred-name= description data-fred-editable= true Default value /p data-fred-name A unique (to this Element) name of the editable HTML Element. Only Elements with this attribute will be saved. By default, Elements with a data-fred-name attribute will automatically behave as if contentedtiable=\"true\" was explicitly declared. The value of this attribute has to be unique across in a single Element, but you can have multiple instances of an Element on the page. In addition, different Elements can share names. Examples !-- Simple editable paragraph -- p data-fred-name= description Default value /p !-- Editable image -- img src= http://via.placeholder.com/450x150 data-fred-name= header-image data-fred-attrs Defines other HTML attributes (comma separated) to save with the content of the HTML element where supported by the editor. E.g. Add alt and title attributes to the ImageEditor. Example img src= http://via.placeholder.com/450x150 alt= Default Alt data-fred-name= header-image data-fred-attrs= alt,title data-fred-render If set to false HTML Element won\u2019t appear when Fred is not loaded. This allows developers to create user-friendly, self-documenting Elements that inform users what they need to do in order to create content. Example p data-fred-render= false Add a *Link Location* setting for this Element to make the button appear. (This will be visible only when Fred is used to create content.) /p data-fred-target Defines Resource field to store content. Content of the HTML Element will be stored in regular Content field and additionally in the specified target. This attribute can\u2019t be used on a dropzone. Available targets: pagetitle longtitle description introtext menutitle alias template variables (text- or textarea-only) Example for default MODX fields h1 data-fred-name= title data-fred-target= pagetitle Default Page Title /h1 Example for Template Varialbe targets Template Variable names must be prefixed with tv_ . As of 1.0, Fred only supports targeting text and textarea TVs. div data-fred-name= favorite_color data-fred-target= tv_favorite_color Lightcoral /div data-fred-rte If set to true the Rich Text Editor will be loaded for the editable HTML Element. Example div data-fred-name= rte-content data-fred-rte= true Default Content /div data-fred-rte-config Specify RTE config that should be used for the Element. Example div data-fred-name= rte-content data-fred-rte= true data-fred-rte-config= simple Default Content /div data-fred-dropzone Defines a new Drop Zone for Fred Elements. This attribute cannot be empty and has to be unique across a single Element. You can create an unlimited number of Dropzones, though more than a few might get quite cumbersome. This is useful for creating alternate layouts like full width, split pages, sidebar pages, etc. Example div data-fred-dropzone= left class= left-content /div div data-fred-dropzone= right class= right-content /div data-fred-link-type Sets a type for a link, used for processing before generating content. Available values: page Used together with other data-fred-link- attributes. Example a href= fred.html data-fred-link-type= page data-fred-link-page= 2 Fred /a data-fred-link-page Defines ID of MODX Resource. Value of this attribute will be used as a link\u2019s href (in MODX format [[~ID]] ) when content is generated. Example a href= fred.html data-fred-link-type= page data-fred-link-page= 2 Fred /a data-fred-media-source This option override globals from Element Settings. Defines Media Source to be used for the Element. Name of the media source is expected and can accommodate multiple Names separated by comma , . Example img src= http://via.placeholder.com/450x150 data-fred-name= header-image data-fred-media-source= Assets,Images data-fred-image-media-source This option override globals from Element Settings and data-fred-media-source (but only for images). Defines Media Source to be used for the Element. Name of the media source is expected and can accommodate multiple Names separated by comma , . Example img src= http://via.placeholder.com/450x150 data-fred-name= header-image data-fred-image-media-source= Assets,Images data-fred-block-class When Fred is loaded, value of this attribute will be appended to class of div.fred--block (which is wrapping the whole Element). When Fred is not loaded, attribute will be added to class of itself. Example div class= image data-fred-block-class= wrapper /div data-fred-class When Fred is loaded, value of this attribute will be added to the own class. Example div class= row data-fred-class= visible-grid /div data-fred-bind Value of the Element will copy from other Element. Example div data-fred-name= name John Doe /div div class= modal div class= modal-header data-fred-bind= name /div div class= modal-content Hello there /div /div data-fred-on-drop The name of the globally accessible function that should be called when this Element is dropped on any Dropzone. The function will receive fredEl as a first attribute. You can use this to trigger a Javascript function, for example, calling a slider initialise script that you normally have document.ready function call. Without using this attribute, you would need to save and reload the page to initialise the newly dropped slider item. Example div class= clock data-fred-on-drop= initClock data-fred-on-setting-change Name of the globally accessible function that should be called when Element setting changes. The function will receive fredEl as first attribute. Example div class= clock data-fred-on-setting-change= reInitClock /div","title":"HTML Attributes"},{"location":"themer/elements/attributes/#data-fred-attributes","text":"The following are the currently available attributes for Fred Elements.","title":"data-fred-\u2026 Attributes"},{"location":"themer/elements/attributes/#data-fred-editable","text":"When set to true the content of the HTML Element will be editable for end users, including any Elements nested within (for nested Dropzones). This attribute has to be used with data-fred-name to save the value. This attribute is set to true by default.","title":"data-fred-editable"},{"location":"themer/elements/attributes/#example","text":"p data-fred-name= description data-fred-editable= true Default value /p","title":"Example"},{"location":"themer/elements/attributes/#data-fred-name","text":"A unique (to this Element) name of the editable HTML Element. Only Elements with this attribute will be saved. By default, Elements with a data-fred-name attribute will automatically behave as if contentedtiable=\"true\" was explicitly declared. The value of this attribute has to be unique across in a single Element, but you can have multiple instances of an Element on the page. In addition, different Elements can share names.","title":"data-fred-name"},{"location":"themer/elements/attributes/#examples","text":"!-- Simple editable paragraph -- p data-fred-name= description Default value /p !-- Editable image -- img src= http://via.placeholder.com/450x150 data-fred-name= header-image","title":"Examples"},{"location":"themer/elements/attributes/#data-fred-attrs","text":"Defines other HTML attributes (comma separated) to save with the content of the HTML element where supported by the editor. E.g. Add alt and title attributes to the ImageEditor.","title":"data-fred-attrs"},{"location":"themer/elements/attributes/#example_1","text":"img src= http://via.placeholder.com/450x150 alt= Default Alt data-fred-name= header-image data-fred-attrs= alt,title","title":"Example"},{"location":"themer/elements/attributes/#data-fred-render","text":"If set to false HTML Element won\u2019t appear when Fred is not loaded. This allows developers to create user-friendly, self-documenting Elements that inform users what they need to do in order to create content.","title":"data-fred-render"},{"location":"themer/elements/attributes/#example_2","text":"p data-fred-render= false Add a *Link Location* setting for this Element to make the button appear. (This will be visible only when Fred is used to create content.) /p","title":"Example"},{"location":"themer/elements/attributes/#data-fred-target","text":"Defines Resource field to store content. Content of the HTML Element will be stored in regular Content field and additionally in the specified target. This attribute can\u2019t be used on a dropzone. Available targets: pagetitle longtitle description introtext menutitle alias template variables (text- or textarea-only)","title":"data-fred-target"},{"location":"themer/elements/attributes/#example-for-default-modx-fields","text":"h1 data-fred-name= title data-fred-target= pagetitle Default Page Title /h1","title":"Example for default MODX fields"},{"location":"themer/elements/attributes/#example-for-template-varialbe-targets","text":"Template Variable names must be prefixed with tv_ . As of 1.0, Fred only supports targeting text and textarea TVs. div data-fred-name= favorite_color data-fred-target= tv_favorite_color Lightcoral /div","title":"Example for Template Varialbe targets"},{"location":"themer/elements/attributes/#data-fred-rte","text":"If set to true the Rich Text Editor will be loaded for the editable HTML Element.","title":"data-fred-rte"},{"location":"themer/elements/attributes/#example_3","text":"div data-fred-name= rte-content data-fred-rte= true Default Content /div","title":"Example"},{"location":"themer/elements/attributes/#data-fred-rte-config","text":"Specify RTE config that should be used for the Element.","title":"data-fred-rte-config"},{"location":"themer/elements/attributes/#example_4","text":"div data-fred-name= rte-content data-fred-rte= true data-fred-rte-config= simple Default Content /div","title":"Example"},{"location":"themer/elements/attributes/#data-fred-dropzone","text":"Defines a new Drop Zone for Fred Elements. This attribute cannot be empty and has to be unique across a single Element. You can create an unlimited number of Dropzones, though more than a few might get quite cumbersome. This is useful for creating alternate layouts like full width, split pages, sidebar pages, etc.","title":"data-fred-dropzone"},{"location":"themer/elements/attributes/#example_5","text":"div data-fred-dropzone= left class= left-content /div div data-fred-dropzone= right class= right-content /div","title":"Example"},{"location":"themer/elements/attributes/#data-fred-link-type","text":"Sets a type for a link, used for processing before generating content. Available values: page Used together with other data-fred-link- attributes.","title":"data-fred-link-type"},{"location":"themer/elements/attributes/#example_6","text":"a href= fred.html data-fred-link-type= page data-fred-link-page= 2 Fred /a","title":"Example"},{"location":"themer/elements/attributes/#data-fred-link-page","text":"Defines ID of MODX Resource. Value of this attribute will be used as a link\u2019s href (in MODX format [[~ID]] ) when content is generated.","title":"data-fred-link-page"},{"location":"themer/elements/attributes/#example_7","text":"a href= fred.html data-fred-link-type= page data-fred-link-page= 2 Fred /a","title":"Example"},{"location":"themer/elements/attributes/#data-fred-media-source","text":"This option override globals from Element Settings. Defines Media Source to be used for the Element. Name of the media source is expected and can accommodate multiple Names separated by comma , .","title":"data-fred-media-source"},{"location":"themer/elements/attributes/#example_8","text":"img src= http://via.placeholder.com/450x150 data-fred-name= header-image data-fred-media-source= Assets,Images","title":"Example"},{"location":"themer/elements/attributes/#data-fred-image-media-source","text":"This option override globals from Element Settings and data-fred-media-source (but only for images). Defines Media Source to be used for the Element. Name of the media source is expected and can accommodate multiple Names separated by comma , .","title":"data-fred-image-media-source"},{"location":"themer/elements/attributes/#example_9","text":"img src= http://via.placeholder.com/450x150 data-fred-name= header-image data-fred-image-media-source= Assets,Images","title":"Example"},{"location":"themer/elements/attributes/#data-fred-block-class","text":"When Fred is loaded, value of this attribute will be appended to class of div.fred--block (which is wrapping the whole Element). When Fred is not loaded, attribute will be added to class of itself.","title":"data-fred-block-class"},{"location":"themer/elements/attributes/#example_10","text":"div class= image data-fred-block-class= wrapper /div","title":"Example"},{"location":"themer/elements/attributes/#data-fred-class","text":"When Fred is loaded, value of this attribute will be added to the own class.","title":"data-fred-class"},{"location":"themer/elements/attributes/#example_11","text":"div class= row data-fred-class= visible-grid /div","title":"Example"},{"location":"themer/elements/attributes/#data-fred-bind","text":"Value of the Element will copy from other Element.","title":"data-fred-bind"},{"location":"themer/elements/attributes/#example_12","text":"div data-fred-name= name John Doe /div div class= modal div class= modal-header data-fred-bind= name /div div class= modal-content Hello there /div /div","title":"Example"},{"location":"themer/elements/attributes/#data-fred-on-drop","text":"The name of the globally accessible function that should be called when this Element is dropped on any Dropzone. The function will receive fredEl as a first attribute. You can use this to trigger a Javascript function, for example, calling a slider initialise script that you normally have document.ready function call. Without using this attribute, you would need to save and reload the page to initialise the newly dropped slider item.","title":"data-fred-on-drop"},{"location":"themer/elements/attributes/#example_13","text":"div class= clock data-fred-on-drop= initClock","title":"Example"},{"location":"themer/elements/attributes/#data-fred-on-setting-change","text":"Name of the globally accessible function that should be called when Element setting changes. The function will receive fredEl as first attribute.","title":"data-fred-on-setting-change"},{"location":"themer/elements/attributes/#example_14","text":"div class= clock data-fred-on-setting-change= reInitClock /div","title":"Example"},{"location":"themer/elements/js_events/","text":"JavaScript Events FredElementDrop This event will trigger when any Element is dropped to a dropzone. You can access fredEl from the event.detail.fredEl object. FredElementSettingChange This event will trigger when Element setting on any Element is changed. You can access fredEl from the event.detail.fredEl object.","title":"JS Events"},{"location":"themer/elements/js_events/#javascript-events","text":"","title":"JavaScript Events"},{"location":"themer/elements/js_events/#fredelementdrop","text":"This event will trigger when any Element is dropped to a dropzone. You can access fredEl from the event.detail.fredEl object.","title":"FredElementDrop"},{"location":"themer/elements/js_events/#fredelementsettingchange","text":"This event will trigger when Element setting on any Element is changed. You can access fredEl from the event.detail.fredEl object.","title":"FredElementSettingChange"},{"location":"themer/elements/markup/","text":"HTML Markup in Fred Elements Fred Elements are made of HTML with specific attributes. The markup can be enhanced using Twig and Element Settings. Markup Examples !-- Simple Element -- div class= panel p data-fred-name= header_text Default Value /p img src= http://via.placeholder.com/450x150 data-fred-name= header_image /div !-- Enhanced Element -- div class= panel {{ panel_class }} p data-fred-name= panel_text Default Value /p {% if cta_link %} a class= btn {{ cta_class }} href= {{ cta_link }} {{ cta_text }} /a {% endif %} /div","title":"HTML Markup & Twig"},{"location":"themer/elements/markup/#html-markup-in-fred-elements","text":"Fred Elements are made of HTML with specific attributes. The markup can be enhanced using Twig and Element Settings.","title":"HTML Markup in Fred Elements"},{"location":"themer/elements/markup/#markup-examples","text":"!-- Simple Element -- div class= panel p data-fred-name= header_text Default Value /p img src= http://via.placeholder.com/450x150 data-fred-name= header_image /div !-- Enhanced Element -- div class= panel {{ panel_class }} p data-fred-name= panel_text Default Value /p {% if cta_link %} a class= btn {{ cta_class }} href= {{ cta_link }} {{ cta_text }} /a {% endif %} /div","title":"Markup Examples"},{"location":"themer/media_sources/","text":"Media Sources can either be assigned globally via a setting in the Media Source itself, or in an Element\u2019s settings by referencing the Media Source Name(s). On install two new settings are added to each Media Source. If you'll want to access Media Sources from Fred, you will need to manually add these settings. NOTE: Fred does not currently check a specific user\u2019s Media Source permissions, and only reviews the following permissions. Media Source Settings fred A Yes/No setting that defines if the Media Source is globally available to Elements rendered in Fred. (defaults to no) fredReadOnly A Yes/No setting that locks a Media Source from being written to. (defaults to no) Element Settings mediaSource ID of the Media Source to use for Finder. Multiple IDs can be passed separated by comma , . imageMediaSource ID of the Media Source to use for Image fields. Multiple IDs can be passed separated by comma , . This option overrides mediaSource .","title":"Media Sources"},{"location":"themer/media_sources/#media-source-settings","text":"","title":"Media Source Settings"},{"location":"themer/media_sources/#fred","text":"A Yes/No setting that defines if the Media Source is globally available to Elements rendered in Fred. (defaults to no)","title":"fred"},{"location":"themer/media_sources/#fredreadonly","text":"A Yes/No setting that locks a Media Source from being written to. (defaults to no)","title":"fredReadOnly"},{"location":"themer/media_sources/#element-settings","text":"","title":"Element Settings"},{"location":"themer/media_sources/#mediasource","text":"ID of the Media Source to use for Finder. Multiple IDs can be passed separated by comma , .","title":"mediaSource"},{"location":"themer/media_sources/#imagemediasource","text":"ID of the Media Source to use for Image fields. Multiple IDs can be passed separated by comma , . This option overrides mediaSource .","title":"imageMediaSource"},{"location":"themer/options/","text":"Options Options are what defines the controls given to end users when configuring Elements. They are defined in a Option Sets that are attached to Elements. Option Sets Option Sets allow you to create Element configuration settings and frequently used sub-sets for use with Elements. Complete Option Sets Option Sets with the complete flag set to Yes can be assigned to individual Element . Option Sets can also be assigned to more than one Element, making it easier to reuse common settings across Elements. Partial Option Sets Option Sets with No in this flag are meant to be imported into other Option Sets. You can use these to define commonly used settings or specific options that will repeat across multiple Option Sets, for example, color swatches, margins and padding, or text style settings. One option set can be used with multiple Elements. If you have frequently used sub-sections of option sets you\u2019d like to share across many option sets, you can use partial option sets. These can then be imported into many other option sets, and are useful for things like color pallets, etc. A variety of option controls/settings give you flexibility in how your end users create and update content. These controls can further be grouped into sub-groups that can be opened/closed for better organization of large option sets. Importing If you use similar Option settings across many sets, you might want to organize them in to partial option sets, and import them to make managing Option Sets more straightforward. Option Overrides On the Fred Manager page for the Create/Edit Element view you can define a unique non-reusable set of controls for the settings. Overrides only affect the current Element and will not affect other Elements using the same Option Set.","title":"Overview"},{"location":"themer/options/#options","text":"Options are what defines the controls given to end users when configuring Elements. They are defined in a Option Sets that are attached to Elements.","title":"Options"},{"location":"themer/options/#option-sets","text":"Option Sets allow you to create Element configuration settings and frequently used sub-sets for use with Elements.","title":"Option Sets"},{"location":"themer/options/#complete-option-sets","text":"Option Sets with the complete flag set to Yes can be assigned to individual Element . Option Sets can also be assigned to more than one Element, making it easier to reuse common settings across Elements.","title":"Complete Option Sets"},{"location":"themer/options/#partial-option-sets","text":"Option Sets with No in this flag are meant to be imported into other Option Sets. You can use these to define commonly used settings or specific options that will repeat across multiple Option Sets, for example, color swatches, margins and padding, or text style settings. One option set can be used with multiple Elements. If you have frequently used sub-sections of option sets you\u2019d like to share across many option sets, you can use partial option sets. These can then be imported into many other option sets, and are useful for things like color pallets, etc. A variety of option controls/settings give you flexibility in how your end users create and update content. These controls can further be grouped into sub-groups that can be opened/closed for better organization of large option sets.","title":"Partial Option Sets"},{"location":"themer/options/#importing","text":"If you use similar Option settings across many sets, you might want to organize them in to partial option sets, and import them to make managing Option Sets more straightforward.","title":"Importing"},{"location":"themer/options/#option-overrides","text":"On the Fred Manager page for the Create/Edit Element view you can define a unique non-reusable set of controls for the settings. Overrides only affect the current Element and will not affect other Elements using the same Option Set.","title":"Option Overrides"},{"location":"themer/options/import/","text":"Importing Partial Option Sets Importing an Option Set is done with a specific with a fred-import key in the JSON import object. Only partial Option Sets can be imported Import only works for Settings The entire import object will be replaced by the Full import The use case for a full import, versus defining a complete Option Set, is if you have a base set of options that are identical across many Elements, including one that only uses the base options. An example of this would be a site that has call to action buttons in many Elements, including one that is just a single CTA button. Full Settings import for a CTA-button-only Element { settings : { fred-import : cta_settings } } cta_settings partial Option Set [ { name : cta_class , label : CTA Class , type : select , options : { danger : Red CTA , info : Blue CTA , default : Default CTA }, value : default }, { name : show_cta , label : Show CTA , type : toggle , value : false } ] Partial import You can import specfic frequently used partial option sub-sets into a Complete Option Set. Complete Option Set Note, the cta_settings import is defined above. { settings : [ { name : panel_class , label : Panel Class , type : text , value : }, { fred-import : cta_settings }, { fred-import : text_color } ] } text_color partial Option Set { name : color , label : Text Color , type : colorswatch , value : black , options : [{ value : primary , color : blue , label : Primary }, lightcoral , black , rgba(0,255,0,.5) ] }","title":"Importing into Option Sets"},{"location":"themer/options/import/#importing-partial-option-sets","text":"Importing an Option Set is done with a specific with a fred-import key in the JSON import object. Only partial Option Sets can be imported Import only works for Settings The entire import object will be replaced by the","title":"Importing Partial Option Sets"},{"location":"themer/options/import/#full-import","text":"The use case for a full import, versus defining a complete Option Set, is if you have a base set of options that are identical across many Elements, including one that only uses the base options. An example of this would be a site that has call to action buttons in many Elements, including one that is just a single CTA button.","title":"Full import"},{"location":"themer/options/import/#full-settings-import-for-a-cta-button-only-element","text":"{ settings : { fred-import : cta_settings } }","title":"Full Settings import for a CTA-button-only Element"},{"location":"themer/options/import/#cta_settings-partial-option-set","text":"[ { name : cta_class , label : CTA Class , type : select , options : { danger : Red CTA , info : Blue CTA , default : Default CTA }, value : default }, { name : show_cta , label : Show CTA , type : toggle , value : false } ]","title":"cta_settings partial Option Set"},{"location":"themer/options/import/#partial-import","text":"You can import specfic frequently used partial option sub-sets into a Complete Option Set.","title":"Partial import"},{"location":"themer/options/import/#complete-option-set","text":"Note, the cta_settings import is defined above. { settings : [ { name : panel_class , label : Panel Class , type : text , value : }, { fred-import : cta_settings }, { fred-import : text_color } ] }","title":"Complete Option Set"},{"location":"themer/options/import/#text_color-partial-option-set","text":"{ name : color , label : Text Color , type : colorswatch , value : black , options : [{ value : primary , color : blue , label : Primary }, lightcoral , black , rgba(0,255,0,.5) ] }","title":"text_color partial Option Set"},{"location":"themer/options/override/","text":"Overriding Option Sets Use cases for overriding an option set are when you need to change things like switching remote from true to false . You can also use them more extensively like overriding all the Settings for a single Element without maintaining an entierly separate Option Set. Overrides are located on the Overrides tab when editing a specific Element in the Fred Manager page. Note: You must include all settings you want to show as controls in the Override panel. The best way to start your override is by copying the entire settings JSON node by clicking the Preview Option Set button and selecting the JSON object(s) and pasting into the overrides text area. Example Assume you have an Intro plan with a background image and a call to action link. You want a version for both single-page sites with anchor link external URLs on the page, but also one which allows links to other Fred pages on your site. You don't need the scroll-to-link (see below) and you want to change the link object to be a MODX page select list. Original Setting { settings : [ { name : image , label : Background Image , type : image , value : assets/themes/starter/img/Fred-hero.jpg }, { fred-import : background_settings }, { name : linkscroll , label : Scroll Link , type : toggle , value : true }, { name : link , label : Link anchor or URL , type : text , value : null } ] } Options Override { settings : [ { name : image , label : Background Image , type : image , value : assets/themes/starter/img/Fred-hero.jpg }, { fred-import : background_settings }, { name : link , label : Link , type : page , value : { id : 1, url : [[~1]] } } ] }","title":"Overriding Option Settingss"},{"location":"themer/options/override/#overriding-option-sets","text":"Use cases for overriding an option set are when you need to change things like switching remote from true to false . You can also use them more extensively like overriding all the Settings for a single Element without maintaining an entierly separate Option Set. Overrides are located on the Overrides tab when editing a specific Element in the Fred Manager page. Note: You must include all settings you want to show as controls in the Override panel. The best way to start your override is by copying the entire settings JSON node by clicking the Preview Option Set button and selecting the JSON object(s) and pasting into the overrides text area.","title":"Overriding Option Sets"},{"location":"themer/options/override/#example","text":"Assume you have an Intro plan with a background image and a call to action link. You want a version for both single-page sites with anchor link external URLs on the page, but also one which allows links to other Fred pages on your site. You don't need the scroll-to-link (see below) and you want to change the link object to be a MODX page select list.","title":"Example"},{"location":"themer/options/override/#original-setting","text":"{ settings : [ { name : image , label : Background Image , type : image , value : assets/themes/starter/img/Fred-hero.jpg }, { fred-import : background_settings }, { name : linkscroll , label : Scroll Link , type : toggle , value : true }, { name : link , label : Link anchor or URL , type : text , value : null } ] }","title":"Original Setting"},{"location":"themer/options/override/#options-override","text":"{ settings : [ { name : image , label : Background Image , type : image , value : assets/themes/starter/img/Fred-hero.jpg }, { fred-import : background_settings }, { name : link , label : Link , type : page , value : { id : 1, url : [[~1]] } } ] }","title":"Options Override"},{"location":"themer/options/settings/","text":"Options Option Sets can have global settings for things like Media Sources and controlling whether or not dynamic asynchronous XHR calls should occur. The visual Settings that display in the browser, can also have sub-sets that serve to keep things organized. Global Settings The followng control individual settings and grouping for an Element in a Fred-powered page. remote Set to true to cause XHR requests to render the Element through both the Twig and MODX parsers. The element also re-renders through both the Twig and MODX parser when you change element settings. This means you can have dynamic content that references other pages within a Fred page using MODX Snippets. Default: false . mediaSource Name of the Media Source to use for Finder. Multiple Names can be passed separated by comma , . imageMediaSource Name of the Media Source to use for Image fields. Multiple Names can be passed separated by comma , . This option overrides mediaSource . Settings Settings are made of a JSON array of objects and group objects which provide configuratin controls for Elements. Settings can import sub-sets of settings using a fred-import object. Settings properties The following properties apply to all settings, regarless of the types below: name - Name of the setting, can be used as a Twig variable label - Setting's Label, displayed in the Element Settings panel value - A default value type - Type of the setting, see next section Note: for the best end-user experience, it is a good idea to set a default value so end users have a starting point to work with. Otherwise it may be confusing due to having a blank Element that may not match the preview image when dragging and dropping into pages. Available Settings types The following Settings types are used to configure Elements in Fred. text A single-line HTML input type=\"text\" element Can have any text value textarea A multie-line HTML textarea element Can have any text value Type specific properties: rows - The number of rows to show; Default: 4 select An HTML select list element Only supports a single select value Type specific properties: options - An object of value:label properties toggle true/false checkbox returns logical true or false colorswatch Visual color picker, to choose from predefined values Type-specific properties: options An array of colors; Example: [\"lightcoral\", \"red\", \"black\"] Color can be either a string or an object with following properties: value - the value passed to Twig for the color, which can be anything color - the displayed color for the swatch label - an arbitrary label for the swatch colorpicker A color picker that supports arbitrary color definitions including RGB, HSL or Hex values with optional opacity Type-specific properties: showAlpha - A boolean to show an alpha transparency slider; Default: true options - An array of colors; Example: [\"lightcoral\", \"red\", \"black\"] slider An input slider for numbers Type-specific properties: min - REQUIRED : The minimum value of the slider max - REQUIRED : The maximum value of the slider tooltipDecimals \u2013 Number of decimals to show in the slider\u2019s tooltip; Default: 0 step \u2013 A number to increment the slider\u2019s value; Default: 1 page MODX Page select Value is returned as an object in format: {\"id\": 1, \"url\": \"fred.html\"} Refrencing ID or URL alone is done through the dot syntax: {{ page-name-example.id}} Type-specific properties: clearButton - If set to true an x button shows in the input field allowing a user to clear any set value resources - If set, only resource with specified IDs will show; Value can be string with a comma as a separator or an array parents - If set, only resource from these parents (including parents itself) will show; Value can be string with a comma as a separator or an array depth - Depth to look for children for specified parents ; Default: 1 file File picker Type-specific property: mediaSource - Optional name of the Media Source to use that overrides the top-level mediaSource global setting image Image select Type-specific properties: showPreview - If set to false preview won't appear under the text input mediaSource - Optional name of the Media Source to use that overrides the top-level imageMediaSource global setting tagger Allows users to choose from preset Tagger tags Type-specific properties: autoTag - true/false to show/hide the auto tag hideInput - true/false to show/hide the input group - An ID of the Tagger group to use limit - Maximum limit of the number of tags that can be selected Setting Groups Groups are used to organize related Option Sets, or to remove infrequently used settings from the main view. group - Name of a group of related sub-settings that open when clicked in a secondary panel. The value of the group property will be used as the label for the group settings - An array of setting objects { group : Group Name , settings : [ { \u2026 }, { \u2026 } ] } Example Option Set with Settings { remote : true, settings : [ { name : panel_class , label : Panel Classes , type : text , value : col-6 col-sm-12 }, { name : logo , lable : Logo , type : image , mediaSource : site-assets , value : assets/images/logo.svg }, { name : nda-file , lable : Upload NDA , type : file , mediaSource : site-assets-files , value : assets/files/contract.pdf }, { name : slogan , label : Slogan , type : textarea , value : Enter your slogan here }, { name : panel_type , label : Type of Panel , type : select , options : [{ value : info , value : warn , value : error }], value : info }, { name : padding_top , label : Top padding , type : slider , min : 0, max : 100, step : 10, value : 20 }, { group : CTA , settings : [ { name : cta_class , label : CTA Class , type : select , options : { danger : Red CTA , info : Blue CTA , default : Default CTA }, value : default }, { name : show_cta , label : Show CTA , type : toggle , value : false }, { name : color , label : Text Color , type : colorswatch , value : black , options : [{ value : primary , color : blue , label : Primary }, lightcoral , black , rgba(0,255,0,.5) ] }, { name : bg_color , label : Background COlor , type : colorpicker , value : white , showAlpha : true, options : [ lightcoral , black , white ] }, { name : page , label : Linked Page , type : page , value : { id :1, url : [[~1]] } } ] } ] }","title":"Settings"},{"location":"themer/options/settings/#options","text":"Option Sets can have global settings for things like Media Sources and controlling whether or not dynamic asynchronous XHR calls should occur. The visual Settings that display in the browser, can also have sub-sets that serve to keep things organized.","title":"Options"},{"location":"themer/options/settings/#global-settings","text":"The followng control individual settings and grouping for an Element in a Fred-powered page.","title":"Global Settings"},{"location":"themer/options/settings/#remote","text":"Set to true to cause XHR requests to render the Element through both the Twig and MODX parsers. The element also re-renders through both the Twig and MODX parser when you change element settings. This means you can have dynamic content that references other pages within a Fred page using MODX Snippets. Default: false .","title":"remote"},{"location":"themer/options/settings/#mediasource","text":"Name of the Media Source to use for Finder. Multiple Names can be passed separated by comma , .","title":"mediaSource"},{"location":"themer/options/settings/#imagemediasource","text":"Name of the Media Source to use for Image fields. Multiple Names can be passed separated by comma , . This option overrides mediaSource .","title":"imageMediaSource"},{"location":"themer/options/settings/#settings","text":"Settings are made of a JSON array of objects and group objects which provide configuratin controls for Elements. Settings can import sub-sets of settings using a fred-import object.","title":"Settings"},{"location":"themer/options/settings/#settings-properties","text":"The following properties apply to all settings, regarless of the types below: name - Name of the setting, can be used as a Twig variable label - Setting's Label, displayed in the Element Settings panel value - A default value type - Type of the setting, see next section Note: for the best end-user experience, it is a good idea to set a default value so end users have a starting point to work with. Otherwise it may be confusing due to having a blank Element that may not match the preview image when dragging and dropping into pages.","title":"Settings properties"},{"location":"themer/options/settings/#available-settings-types","text":"The following Settings types are used to configure Elements in Fred.","title":"Available Settings types"},{"location":"themer/options/settings/#text","text":"A single-line HTML input type=\"text\" element Can have any text value","title":"text"},{"location":"themer/options/settings/#textarea","text":"A multie-line HTML textarea element Can have any text value Type specific properties: rows - The number of rows to show; Default: 4","title":"textarea"},{"location":"themer/options/settings/#select","text":"An HTML select list element Only supports a single select value Type specific properties: options - An object of value:label properties","title":"select"},{"location":"themer/options/settings/#toggle","text":"true/false checkbox returns logical true or false","title":"toggle"},{"location":"themer/options/settings/#colorswatch","text":"Visual color picker, to choose from predefined values Type-specific properties: options An array of colors; Example: [\"lightcoral\", \"red\", \"black\"] Color can be either a string or an object with following properties: value - the value passed to Twig for the color, which can be anything color - the displayed color for the swatch label - an arbitrary label for the swatch","title":"colorswatch"},{"location":"themer/options/settings/#colorpicker","text":"A color picker that supports arbitrary color definitions including RGB, HSL or Hex values with optional opacity Type-specific properties: showAlpha - A boolean to show an alpha transparency slider; Default: true options - An array of colors; Example: [\"lightcoral\", \"red\", \"black\"]","title":"colorpicker"},{"location":"themer/options/settings/#slider","text":"An input slider for numbers Type-specific properties: min - REQUIRED : The minimum value of the slider max - REQUIRED : The maximum value of the slider tooltipDecimals \u2013 Number of decimals to show in the slider\u2019s tooltip; Default: 0 step \u2013 A number to increment the slider\u2019s value; Default: 1","title":"slider"},{"location":"themer/options/settings/#page","text":"MODX Page select Value is returned as an object in format: {\"id\": 1, \"url\": \"fred.html\"} Refrencing ID or URL alone is done through the dot syntax: {{ page-name-example.id}} Type-specific properties: clearButton - If set to true an x button shows in the input field allowing a user to clear any set value resources - If set, only resource with specified IDs will show; Value can be string with a comma as a separator or an array parents - If set, only resource from these parents (including parents itself) will show; Value can be string with a comma as a separator or an array depth - Depth to look for children for specified parents ; Default: 1","title":"page"},{"location":"themer/options/settings/#file","text":"File picker Type-specific property: mediaSource - Optional name of the Media Source to use that overrides the top-level mediaSource global setting","title":"file"},{"location":"themer/options/settings/#image","text":"Image select Type-specific properties: showPreview - If set to false preview won't appear under the text input mediaSource - Optional name of the Media Source to use that overrides the top-level imageMediaSource global setting","title":"image"},{"location":"themer/options/settings/#tagger","text":"Allows users to choose from preset Tagger tags Type-specific properties: autoTag - true/false to show/hide the auto tag hideInput - true/false to show/hide the input group - An ID of the Tagger group to use limit - Maximum limit of the number of tags that can be selected","title":"tagger"},{"location":"themer/options/settings/#setting-groups","text":"Groups are used to organize related Option Sets, or to remove infrequently used settings from the main view. group - Name of a group of related sub-settings that open when clicked in a secondary panel. The value of the group property will be used as the label for the group settings - An array of setting objects { group : Group Name , settings : [ { \u2026 }, { \u2026 } ] }","title":"Setting Groups"},{"location":"themer/options/settings/#example-option-set-with-settings","text":"{ remote : true, settings : [ { name : panel_class , label : Panel Classes , type : text , value : col-6 col-sm-12 }, { name : logo , lable : Logo , type : image , mediaSource : site-assets , value : assets/images/logo.svg }, { name : nda-file , lable : Upload NDA , type : file , mediaSource : site-assets-files , value : assets/files/contract.pdf }, { name : slogan , label : Slogan , type : textarea , value : Enter your slogan here }, { name : panel_type , label : Type of Panel , type : select , options : [{ value : info , value : warn , value : error }], value : info }, { name : padding_top , label : Top padding , type : slider , min : 0, max : 100, step : 10, value : 20 }, { group : CTA , settings : [ { name : cta_class , label : CTA Class , type : select , options : { danger : Red CTA , info : Blue CTA , default : Default CTA }, value : default }, { name : show_cta , label : Show CTA , type : toggle , value : false }, { name : color , label : Text Color , type : colorswatch , value : black , options : [{ value : primary , color : blue , label : Primary }, lightcoral , black , rgba(0,255,0,.5) ] }, { name : bg_color , label : Background COlor , type : colorpicker , value : white , showAlpha : true, options : [ lightcoral , black , white ] }, { name : page , label : Linked Page , type : page , value : { id :1, url : [[~1]] } } ] } ] }","title":"Example Option Set with Settings"},{"location":"themer/rte_configs/","text":"Rich Text Editor (RTE) Configs todo @theboxer The default RTE configuration for the TinyMCE Editor for Fred is as follows: { theme : inlite , inline : true, plugins : modxlink image imagetools media lists , insert_toolbar : image media quicktable modxlink , selection_toolbar : bold italic underline | alignleft aligncenter alignright | bullist numlist | modxlink h2 h3 h4 blockquote , image_advtab : true, imagetools_toolbar : alignleft aligncenter alignright | rotateleft rotateright | flipv fliph | editimage imageoptions , auto_focus : false, branding : false, relative_urls : false, image_dimensions : false } For an ultra-minimal streamlined RTE, for example for only allowing italics and bolding in headlines, you might use the following RTE config: { theme : inlite ; inline : true, selection_toolbar : bold italic } To learn more about plugins and options for TinyMCE, please see the TinyMCE Examples Demos .","title":"RTE Configs"},{"location":"themer/rte_configs/#rich-text-editor-rte-configs","text":"todo @theboxer The default RTE configuration for the TinyMCE Editor for Fred is as follows: { theme : inlite , inline : true, plugins : modxlink image imagetools media lists , insert_toolbar : image media quicktable modxlink , selection_toolbar : bold italic underline | alignleft aligncenter alignright | bullist numlist | modxlink h2 h3 h4 blockquote , image_advtab : true, imagetools_toolbar : alignleft aligncenter alignright | rotateleft rotateright | flipv fliph | editimage imageoptions , auto_focus : false, branding : false, relative_urls : false, image_dimensions : false } For an ultra-minimal streamlined RTE, for example for only allowing italics and bolding in headlines, you might use the following RTE config: { theme : inlite ; inline : true, selection_toolbar : bold italic } To learn more about plugins and options for TinyMCE, please see the TinyMCE Examples Demos .","title":"Rich Text Editor (RTE) Configs"},{"location":"themer/system_settings/","text":"Fred system settings control how your site reacts. Since Fred is loaded on the frontend, you can change how these works per-context, user, or group. Example Chunk: Content Area (13) section class= container div data-fred-name= content data-fred-rte= true /div /section You would set the value to be 13|content Element\u2019s Group Sort (fred.element_group_sort) By default Element categories are sorted by name , but you can switch it to use the rank if you want them to be sorted in a specific order. Blueprint Sort (fred.blueprint_sort) By default blueprints are sorted by name , but you can switch it to use the rank if you want them to be sorted in a specific order. Blueprint\u2019s Category Sort (fred.blueprint_category_sort) By default blueprint categories are sorted by name , but you can switch it to use the rank if you want them to be sorted in a specific order. Icon Editor (fred.icon_editor) Fred can use plugins that tap into different Element types. The Icon Editor targets i Elements that also have a data-fred-name attribute. Image Editor (fred.image_editor) Fred can use plugins that tap into different Element types. The Image Editor targets img Elements that also have a data-fred-name attribute. Position of Launcher (fred.launcher_position) The Fred launcher can be positioned in any corner of the site to prevent hiding an Element on your design. Options include: bottom_left , bottom , bottom_right , top_left , top , and top_right . Rich Text Editor (fred.rte) Fred can use plugins that tap into different Element types. The Image Editor targets any wrapper Elements that also have a data-fred-name attribute and are set to data-fred-editable=\"true\" data-fred-rte=\"true\" .","title":"System Settings"},{"location":"themer/system_settings/#example-chunk-content-area-13","text":"section class= container div data-fred-name= content data-fred-rte= true /div /section You would set the value to be 13|content","title":"Example Chunk: Content Area (13)"},{"location":"themer/system_settings/#elements-group-sort-fredelement_group_sort","text":"By default Element categories are sorted by name , but you can switch it to use the rank if you want them to be sorted in a specific order.","title":"Element\u2019s Group Sort (fred.element_group_sort)"},{"location":"themer/system_settings/#blueprint-sort-fredblueprint_sort","text":"By default blueprints are sorted by name , but you can switch it to use the rank if you want them to be sorted in a specific order.","title":"Blueprint Sort (fred.blueprint_sort)"},{"location":"themer/system_settings/#blueprints-category-sort-fredblueprint_category_sort","text":"By default blueprint categories are sorted by name , but you can switch it to use the rank if you want them to be sorted in a specific order.","title":"Blueprint\u2019s Category Sort (fred.blueprint_category_sort)"},{"location":"themer/system_settings/#icon-editor-fredicon_editor","text":"Fred can use plugins that tap into different Element types. The Icon Editor targets i Elements that also have a data-fred-name attribute.","title":"Icon Editor (fred.icon_editor)"},{"location":"themer/system_settings/#image-editor-fredimage_editor","text":"Fred can use plugins that tap into different Element types. The Image Editor targets img Elements that also have a data-fred-name attribute.","title":"Image Editor (fred.image_editor)"},{"location":"themer/system_settings/#position-of-launcher-fredlauncher_position","text":"The Fred launcher can be positioned in any corner of the site to prevent hiding an Element on your design. Options include: bottom_left , bottom , bottom_right , top_left , top , and top_right .","title":"Position of Launcher (fred.launcher_position)"},{"location":"themer/system_settings/#rich-text-editor-fredrte","text":"Fred can use plugins that tap into different Element types. The Image Editor targets any wrapper Elements that also have a data-fred-name attribute and are set to data-fred-editable=\"true\" data-fred-rte=\"true\" .","title":"Rich Text Editor (fred.rte)"},{"location":"themer/templates/","text":"Preparing MODX Templates for use with Fred Fred only loads on Pages which use MODX Templates assigned to a Fred Theme ( Extras Fred Themed Templates ). Any Resource using a template listed in that table will block access to the Content area in the Manager and load Fred on the front-end when logged in for editing. Dropzones Most templates will have a content Dropzone. Fred also supports multiple Dropzones for things like sidebars, headers, footers, or any other purpose you need. In your Fred Templates, you need to define where Dropzones will be by using data-fred-\u2026 attributes with HTML. Simple Fred Template Example with One Dropzone html head title [[*pagetitle]] /title /head body div data-fred-dropzone= content data-fred-min-height= 500px [[*content]] /div /body /html The default minimum height for a dropzone is only 5 pixels, which may be a bit small to target. If you wish to have a larger \u201cempty\u201d default state, add a data-fred-min-height=\"250px\" setting with your desired minimum height. A larger minimum height on a dropzone can make it easier to target for dropping Elements when empty. The size of your min-height might also need to change if you have competing or overlapping Elements, such as a fixed top navigation bar. The dropzone\u2019s data-fred-dropzone=\"content\" attribute is required and tells it where to save the rendered Fred content. It also needs to contain a reference to the [[*content]] tag inside of it. When Fred loads, it clears out the content rendered in the dropzone, and loads it with Element data. However, when Fred is not loaded, it just renders whatever tags you have in that area. Multiple Dropzones Sometimes you may want to have a more complex layout with multiple Dropzones, like for a main content area and a sidebar. Fred installs a new Template Variable type for this purpose: Fred Dropzone . To create another dropzone do the following: From the MODX Manager, navigate to the Elements sidebar tree Template Variables drop-down list + circle icon to create a new TV Give the TV a name, such as \u201csidebar\u201d and assign it to a Fred category From the Input Options tab choose \"Fred Dropzone\" from the Input Type select list If you want to see the rendered content from the Manager, change the value of the last \u201cHide Field from Manager:\u201d option to \u201cNo\u201d. Example Template with sidebar Dropzone html head title [[*pagetitle]] /title /head body section id= wrapper div id= main data-fred-dropzone= content data-fred-min-height= 500px [[*content]] /div aside id= sidebar data-fred-dropzone= sidebar data-fred-min-height= 250px [[*sidebar]] /aside /section /body /html","title":"MODX Templates for Fred"},{"location":"themer/templates/#preparing-modx-templates-for-use-with-fred","text":"Fred only loads on Pages which use MODX Templates assigned to a Fred Theme ( Extras Fred Themed Templates ). Any Resource using a template listed in that table will block access to the Content area in the Manager and load Fred on the front-end when logged in for editing.","title":"Preparing MODX Templates for use with Fred"},{"location":"themer/templates/#dropzones","text":"Most templates will have a content Dropzone. Fred also supports multiple Dropzones for things like sidebars, headers, footers, or any other purpose you need. In your Fred Templates, you need to define where Dropzones will be by using data-fred-\u2026 attributes with HTML.","title":"Dropzones"},{"location":"themer/templates/#simple-fred-template-example-with-one-dropzone","text":"html head title [[*pagetitle]] /title /head body div data-fred-dropzone= content data-fred-min-height= 500px [[*content]] /div /body /html The default minimum height for a dropzone is only 5 pixels, which may be a bit small to target. If you wish to have a larger \u201cempty\u201d default state, add a data-fred-min-height=\"250px\" setting with your desired minimum height. A larger minimum height on a dropzone can make it easier to target for dropping Elements when empty. The size of your min-height might also need to change if you have competing or overlapping Elements, such as a fixed top navigation bar. The dropzone\u2019s data-fred-dropzone=\"content\" attribute is required and tells it where to save the rendered Fred content. It also needs to contain a reference to the [[*content]] tag inside of it. When Fred loads, it clears out the content rendered in the dropzone, and loads it with Element data. However, when Fred is not loaded, it just renders whatever tags you have in that area.","title":"Simple Fred Template Example with One Dropzone"},{"location":"themer/templates/#multiple-dropzones","text":"Sometimes you may want to have a more complex layout with multiple Dropzones, like for a main content area and a sidebar. Fred installs a new Template Variable type for this purpose: Fred Dropzone . To create another dropzone do the following: From the MODX Manager, navigate to the Elements sidebar tree Template Variables drop-down list + circle icon to create a new TV Give the TV a name, such as \u201csidebar\u201d and assign it to a Fred category From the Input Options tab choose \"Fred Dropzone\" from the Input Type select list If you want to see the rendered content from the Manager, change the value of the last \u201cHide Field from Manager:\u201d option to \u201cNo\u201d.","title":"Multiple Dropzones"},{"location":"themer/templates/#example-template-with-sidebar-dropzone","text":"html head title [[*pagetitle]] /title /head body section id= wrapper div id= main data-fred-dropzone= content data-fred-min-height= 500px [[*content]] /div aside id= sidebar data-fred-dropzone= sidebar data-fred-min-height= 250px [[*sidebar]] /aside /section /body /html","title":"Example Template with sidebar Dropzone"}]}